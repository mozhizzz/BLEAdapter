<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BLE_Adapter.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BLE_Adapter.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Aug 27 21:40:12 2023
<BR><P>
<H3>Maximum Stack Usage =       1104 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
prvIdleTask &rArr; vPortSuppressTicksAndSleep &rArr; HAL_PWR_MNGR_Request &rArr; PowerSave_Setup &rArr; MrBleBiasTrimConfig
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c6]">ACL_list_insert_tail</a>
 <LI><a href="#[ee]">ACL_list_remove</a>
 <LI><a href="#[9f]">Acl_Transmit_Data</a>
 <LI><a href="#[a1]">BLEPLAT_aes128_encrypt</a>
 <LI><a href="#[a4]">BLE_STACK_RadioHandler</a>
 <LI><a href="#[b4]">BLE_STACK_SleepCheck</a>
 <LI><a href="#[b9]">CST_stop</a>
 <LI><a href="#[bf]">GAP_Terminate_Link</a>
 <LI><a href="#[c2]">GAT_att_cmn_get_conn_descr_p</a>
 <LI><a href="#[c1]">GAT_att_cmn_get_conn_index</a>
 <LI><a href="#[c3]">GAT_att_cmn_send</a>
 <LI><a href="#[c7]">GAT_att_cmn_stop_timer</a>
 <LI><a href="#[cb]">GAT_att_db_find_by_def</a>
 <LI><a href="#[cc]">GAT_att_db_find_by_handle</a>
 <LI><a href="#[cd]">GAT_att_db_find_from_handle</a>
 <LI><a href="#[d0]">GAT_att_db_get_last_group_handle</a>
 <LI><a href="#[d1]">GAT_att_db_get_next</a>
 <LI><a href="#[dc]">GAT_att_srv_extract_write_packet_data</a>
 <LI><a href="#[ed]">GAT_att_srv_resp</a>
 <LI><a href="#[f2]">GAT_srv_attr_value_read</a>
 <LI><a href="#[f4]">GAT_srv_attr_value_write</a>
 <LI><a href="#[de]">GAT_srv_check_change_aware</a>
 <LI><a href="#[ea]">GAT_srv_check_perms</a>
 <LI><a href="#[df]">GAT_srv_find_by_type_attr_p</a>
 <LI><a href="#[e3]">GAT_srv_get_att_group_end_handle</a>
 <LI><a href="#[e4]">GAT_srv_get_attr_type</a>
 <LI><a href="#[eb]">GAT_srv_get_attr_value</a>
 <LI><a href="#[105]">GAT_srv_get_attribute_handle</a>
 <LI><a href="#[106]">GAT_srv_get_cccd_val</a>
 <LI><a href="#[e8]">GAT_srv_is_supported_grouping_type</a>
 <LI><a href="#[109]">GAT_srv_resp</a>
 <LI><a href="#[c5]">L2C_send_frame</a>
 <LI><a href="#[c0]">LL_Disconnect_Link</a>
 <LI><a href="#[a0]">LL_Send_ACL_Data</a>
 <LI><a href="#[14f]">LL_conn_calculate_ww</a>
 <LI><a href="#[144]">LL_conn_get_cntxt_per_p</a>
 <LI><a href="#[137]">LL_conn_get_cntxt_per_p_from_handle</a>
 <LI><a href="#[134]">LL_conn_get_conn_idx</a>
 <LI><a href="#[13f]">LL_conn_get_ctrl_pdu_data_p</a>
 <LI><a href="#[142]">LL_conn_get_enc_on</a>
 <LI><a href="#[13e]">LL_conn_get_tx_acl_blocked</a>
 <LI><a href="#[13b]">LL_conn_is_slave</a>
 <LI><a href="#[135]">LL_cpe_get_tx_terminate_in_progress</a>
 <LI><a href="#[136]">LL_cpe_set_disconnect</a>
 <LI><a href="#[b3]">LL_sched_engine</a>
 <LI><a href="#[ab]">LL_sched_get_cntxt_task</a>
 <LI><a href="#[a9]">LL_sched_get_current_taskslot_no</a>
 <LI><a href="#[ac]">LL_sched_get_done_cb</a>
 <LI><a href="#[138]">LL_sched_get_next_anchor</a>
 <LI><a href="#[13a]">LL_sched_get_next_taskslot</a>
 <LI><a href="#[aa]">LL_sched_get_per_state</a>
 <LI><a href="#[150]">LL_sched_set_taskslot_length_anchor</a>
 <LI><a href="#[a8]">LL_sched_time_t1_ge_t2</a>
 <LI><a href="#[149]">Mem_Buff_block_copy</a>
 <LI><a href="#[15d]">Mem_Buff_cmp</a>
 <LI><a href="#[170]">Mem_Buff_get</a>
 <LI><a href="#[171]">Mem_Buff_get_chain_count</a>
 <LI><a href="#[172]">Mem_Buff_get_chain_size</a>
 <LI><a href="#[15f]">Mem_Buff_read</a>
 <LI><a href="#[160]">Mem_Buff_release</a>
 <LI><a href="#[162]">Mem_Buff_resize</a>
 <LI><a href="#[163]">Mem_Buff_write</a>
 <LI><a href="#[dd]">PM_Copy_Pckt_Data</a>
 <LI><a href="#[16e]">PM_Get_Pckt</a>
 <LI><a href="#[e1]">PM_Pckt_Cmp</a>
 <LI><a href="#[f0]">PM_Release_Acl_Pckt</a>
 <LI><a href="#[c4]">PM_Resize_Pckt_Pdu_Size</a>
 <LI><a href="#[e2]">PM_Write_Pckt_Data</a>
 <LI><a href="#[fd]">SMP_check_encryption_key_size</a>
 <LI><a href="#[fc]">SMP_get_link_status</a>
 <LI><a href="#[fb]">SMP_get_remote_device_list_item</a>
 <LI><a href="#[f3]">SMP_validate_signed_packet</a>
 <LI><a href="#[ff]">UUID_cmp</a>
 <LI><a href="#[108]">UUID_cmp_128bits</a>
 <LI><a href="#[e5]">UUID_get_value_p</a>
 <LI><a href="#[100]">UUID_write_to_flat</a>
 <LI><a href="#[1a7]">aci_att_clt_exec_write_resp_event</a>
 <LI><a href="#[6d]">aci_att_clt_exec_write_resp_event_cb</a>
 <LI><a href="#[1a9]">aci_att_clt_find_by_type_value_resp_event</a>
 <LI><a href="#[66]">aci_att_clt_find_by_type_value_resp_event_cb</a>
 <LI><a href="#[1a8]">aci_att_clt_find_by_type_value_resp_event_copy</a>
 <LI><a href="#[1ab]">aci_att_clt_find_info_resp_event</a>
 <LI><a href="#[65]">aci_att_clt_find_info_resp_event_cb</a>
 <LI><a href="#[1aa]">aci_att_clt_find_info_resp_event_copy</a>
 <LI><a href="#[1ad]">aci_att_clt_prepare_write_resp_event</a>
 <LI><a href="#[6c]">aci_att_clt_prepare_write_resp_event_cb</a>
 <LI><a href="#[1ac]">aci_att_clt_prepare_write_resp_event_copy</a>
 <LI><a href="#[1af]">aci_att_clt_read_blob_resp_event</a>
 <LI><a href="#[69]">aci_att_clt_read_blob_resp_event_cb</a>
 <LI><a href="#[1ae]">aci_att_clt_read_blob_resp_event_copy</a>
 <LI><a href="#[1b1]">aci_att_clt_read_by_group_type_resp_event</a>
 <LI><a href="#[6b]">aci_att_clt_read_by_group_type_resp_event_cb</a>
 <LI><a href="#[1b0]">aci_att_clt_read_by_group_type_resp_event_copy</a>
 <LI><a href="#[1b3]">aci_att_clt_read_by_type_resp_event</a>
 <LI><a href="#[67]">aci_att_clt_read_by_type_resp_event_cb</a>
 <LI><a href="#[1b2]">aci_att_clt_read_by_type_resp_event_copy</a>
 <LI><a href="#[1b5]">aci_att_clt_read_multiple_resp_event</a>
 <LI><a href="#[6a]">aci_att_clt_read_multiple_resp_event_cb</a>
 <LI><a href="#[1b4]">aci_att_clt_read_multiple_resp_event_copy</a>
 <LI><a href="#[1b7]">aci_att_clt_read_resp_event</a>
 <LI><a href="#[68]">aci_att_clt_read_resp_event_cb</a>
 <LI><a href="#[1b6]">aci_att_clt_read_resp_event_copy</a>
 <LI><a href="#[1b8]">aci_att_exchange_mtu_resp_event</a>
 <LI><a href="#[64]">aci_att_exchange_mtu_resp_event_cb</a>
 <LI><a href="#[1b9]">aci_att_srv_exec_write_req_event</a>
 <LI><a href="#[78]">aci_att_srv_exec_write_req_event_cb</a>
 <LI><a href="#[1ba]">aci_att_srv_prepare_write_req_event</a>
 <LI><a href="#[77]">aci_att_srv_prepare_write_req_event_cb</a>
 <LI><a href="#[1bb]">aci_att_srv_prepare_write_req_event_copy</a>
 <LI><a href="#[d9]">aci_event_fifo_push</a>
 <LI><a href="#[d8]">aci_event_fifo_push_header</a>
 <LI><a href="#[1bd]">aci_gap_addr_not_resolved_event</a>
 <LI><a href="#[56]">aci_gap_addr_not_resolved_event_cb</a>
 <LI><a href="#[1be]">aci_gap_bond_lost_event</a>
 <LI><a href="#[54]">aci_gap_bond_lost_event_cb</a>
 <LI><a href="#[1c0]">aci_gap_keypress_notification_event</a>
 <LI><a href="#[1bf]">aci_gap_keypress_notification_event_cb</a>
 <LI><a href="#[1c1]">aci_gap_limited_discoverable_event</a>
 <LI><a href="#[50]">aci_gap_limited_discoverable_event_cb</a>
 <LI><a href="#[1c3]">aci_gap_numeric_comparison_value_event</a>
 <LI><a href="#[1c2]">aci_gap_numeric_comparison_value_event_cb</a>
 <LI><a href="#[51]">aci_gap_pairing_complete_event_cb</a>
 <LI><a href="#[52]">aci_gap_pass_key_req_event_cb</a>
 <LI><a href="#[55]">aci_gap_proc_complete_event_cb</a>
 <LI><a href="#[1c7]">aci_gap_slave_security_initiated_event</a>
 <LI><a href="#[53]">aci_gap_slave_security_initiated_event_cb</a>
 <LI><a href="#[1c8]">aci_gap_terminate</a>
 <LI><a href="#[72]">aci_gatt_clt_disc_read_char_by_uuid_resp_event_cb</a>
 <LI><a href="#[71]">aci_gatt_clt_error_resp_event_cb</a>
 <LI><a href="#[1cc]">aci_gatt_clt_indication_event</a>
 <LI><a href="#[6e]">aci_gatt_clt_indication_event_cb</a>
 <LI><a href="#[1cb]">aci_gatt_clt_indication_event_copy</a>
 <LI><a href="#[6f]">aci_gatt_clt_notification_event_cb</a>
 <LI><a href="#[1cd]">aci_gatt_clt_notification_event_copy</a>
 <LI><a href="#[1cf]">aci_gatt_clt_proc_complete_event</a>
 <LI><a href="#[70]">aci_gatt_clt_proc_complete_event_cb</a>
 <LI><a href="#[1d0]">aci_gatt_proc_timeout_event</a>
 <LI><a href="#[63]">aci_gatt_proc_timeout_event_cb</a>
 <LI><a href="#[62]">aci_gatt_srv_attribute_modified_event_cb</a>
 <LI><a href="#[1d2]">aci_gatt_srv_confirmation_event</a>
 <LI><a href="#[74]">aci_gatt_srv_confirmation_event_cb</a>
 <LI><a href="#[1d3]">aci_gatt_srv_read_event</a>
 <LI><a href="#[75]">aci_gatt_srv_read_event_cb</a>
 <LI><a href="#[1d4]">aci_gatt_srv_write_event</a>
 <LI><a href="#[76]">aci_gatt_srv_write_event_cb</a>
 <LI><a href="#[1d5]">aci_gatt_srv_write_event_copy</a>
 <LI><a href="#[73]">aci_gatt_tx_pool_available_event_cb</a>
 <LI><a href="#[1d7]">aci_hal_adv_scan_resp_data_update_event</a>
 <LI><a href="#[3f]">aci_hal_adv_scan_resp_data_update_event_cb</a>
 <LI><a href="#[3e]">aci_hal_fw_error_event_cb</a>
 <LI><a href="#[1da]">aci_hal_scan_req_report_event</a>
 <LI><a href="#[1d9]">aci_hal_scan_req_report_event_cb</a>
 <LI><a href="#[1dc]">aci_l2cap_cfc_connection_event</a>
 <LI><a href="#[1db]">aci_l2cap_cfc_connection_event_cb</a>
 <LI><a href="#[1dd]">aci_l2cap_command_reject_event</a>
 <LI><a href="#[5f]">aci_l2cap_command_reject_event_cb</a>
 <LI><a href="#[1de]">aci_l2cap_connection_update_req_event</a>
 <LI><a href="#[5b]">aci_l2cap_connection_update_req_event_cb</a>
 <LI><a href="#[1df]">aci_l2cap_connection_update_resp_event</a>
 <LI><a href="#[59]">aci_l2cap_connection_update_resp_event_cb</a>
 <LI><a href="#[1e1]">aci_l2cap_disconnection_complete_event</a>
 <LI><a href="#[1e0]">aci_l2cap_disconnection_complete_event_cb</a>
 <LI><a href="#[1e3]">aci_l2cap_flow_control_credit_event</a>
 <LI><a href="#[1e2]">aci_l2cap_flow_control_credit_event_cb</a>
 <LI><a href="#[1e5]">aci_l2cap_proc_timeout_event</a>
 <LI><a href="#[5a]">aci_l2cap_proc_timeout_event_cb</a>
 <LI><a href="#[1e4]">aci_l2cap_proc_timeout_event_copy</a>
 <LI><a href="#[1e7]">aci_l2cap_sdu_data_rx_event</a>
 <LI><a href="#[1e6]">aci_l2cap_sdu_data_rx_event_cb</a>
 <LI><a href="#[1e9]">aci_l2cap_sdu_data_tx_event</a>
 <LI><a href="#[1e8]">aci_l2cap_sdu_data_tx_event_cb</a>
 <LI><a href="#[1ec]">hci_authenticated_payload_timeout_expired_event</a>
 <LI><a href="#[3c]">hci_authenticated_payload_timeout_expired_event_cb</a>
 <LI><a href="#[1ed]">hci_data_buffer_overflow_event</a>
 <LI><a href="#[3b]">hci_data_buffer_overflow_event_cb</a>
 <LI><a href="#[2c]">hci_disconnection_complete_event_cb</a>
 <LI><a href="#[2d]">hci_encryption_change_event_cb</a>
 <LI><a href="#[1f0]">hci_encryption_key_refresh_complete_event</a>
 <LI><a href="#[2e]">hci_encryption_key_refresh_complete_event_cb</a>
 <LI><a href="#[1f2]">hci_le_advertising_report_event</a>
 <LI><a href="#[1f1]">hci_le_advertising_report_event_cb</a>
 <LI><a href="#[1f4]">hci_le_advertising_set_terminated_event</a>
 <LI><a href="#[1f3]">hci_le_advertising_set_terminated_event_cb</a>
 <LI><a href="#[1f5]">hci_le_channel_selection_algorithm_event</a>
 <LI><a href="#[48]">hci_le_channel_selection_algorithm_event_cb</a>
 <LI><a href="#[2f]">hci_le_connection_complete_event_cb</a>
 <LI><a href="#[4a]">hci_le_connection_iq_report_event_cb_ucfg</a>
 <LI><a href="#[28a]">hci_le_connection_iq_report_event_cb_ucfg_weak</a>
 <LI><a href="#[1f7]">hci_le_connection_update_complete_event</a>
 <LI><a href="#[40]">hci_le_connection_update_complete_event_cb</a>
 <LI><a href="#[49]">hci_le_connectionless_iq_report_event_cb_ucfg</a>
 <LI><a href="#[28b]">hci_le_connectionless_iq_report_event_cb_ucfg_weak</a>
 <LI><a href="#[4b]">hci_le_cte_request_failed_event_cb_ucfg</a>
 <LI><a href="#[28c]">hci_le_cte_request_failed_event_cb_ucfg_weak</a>
 <LI><a href="#[1f9]">hci_le_data_length_change_event</a>
 <LI><a href="#[1f8]">hci_le_data_length_change_event_cb</a>
 <LI><a href="#[1fb]">hci_le_direct_advertising_report_event</a>
 <LI><a href="#[1fa]">hci_le_direct_advertising_report_event_cb</a>
 <LI><a href="#[1fc]">hci_le_encrypt</a>
 <LI><a href="#[34]">hci_le_enhanced_connection_complete_event_cb</a>
 <LI><a href="#[1fe]">hci_le_extended_advertising_report_event_cb</a>
 <LI><a href="#[201]">hci_le_generate_dhkey_complete_event</a>
 <LI><a href="#[200]">hci_le_generate_dhkey_complete_event_cb</a>
 <LI><a href="#[202]">hci_le_long_term_key_request_event</a>
 <LI><a href="#[31]">hci_le_long_term_key_request_event_cb</a>
 <LI><a href="#[204]">hci_le_path_loss_threshold_event</a>
 <LI><a href="#[203]">hci_le_path_loss_threshold_event_cb</a>
 <LI><a href="#[206]">hci_le_periodic_advertising_report_event</a>
 <LI><a href="#[205]">hci_le_periodic_advertising_report_event_cb</a>
 <LI><a href="#[208]">hci_le_periodic_advertising_sync_established_event</a>
 <LI><a href="#[207]">hci_le_periodic_advertising_sync_established_event_cb</a>
 <LI><a href="#[20a]">hci_le_periodic_advertising_sync_lost_event</a>
 <LI><a href="#[209]">hci_le_periodic_advertising_sync_lost_event_cb</a>
 <LI><a href="#[20c]">hci_le_periodic_advertising_sync_transfer_received_event</a>
 <LI><a href="#[20b]">hci_le_periodic_advertising_sync_transfer_received_event_cb</a>
 <LI><a href="#[20e]">hci_le_phy_update_complete_event</a>
 <LI><a href="#[20d]">hci_le_phy_update_complete_event_cb</a>
 <LI><a href="#[210]">hci_le_read_local_p256_public_key_complete_event</a>
 <LI><a href="#[20f]">hci_le_read_local_p256_public_key_complete_event_cb</a>
 <LI><a href="#[211]">hci_le_read_remote_used_features_complete_event</a>
 <LI><a href="#[41]">hci_le_read_remote_used_features_complete_event_cb</a>
 <LI><a href="#[213]">hci_le_scan_request_received_event</a>
 <LI><a href="#[212]">hci_le_scan_request_received_event_cb</a>
 <LI><a href="#[215]">hci_le_scan_timeout_event</a>
 <LI><a href="#[214]">hci_le_scan_timeout_event_cb</a>
 <LI><a href="#[217]">hci_le_transmit_power_reporting_event</a>
 <LI><a href="#[216]">hci_le_transmit_power_reporting_event_cb</a>
 <LI><a href="#[219]">hci_number_of_completed_packets_event</a>
 <LI><a href="#[3a]">hci_number_of_completed_packets_event_cb</a>
 <LI><a href="#[218]">hci_number_of_completed_packets_event_copy</a>
 <LI><a href="#[21a]">hci_read_remote_version_information_complete_event</a>
 <LI><a href="#[39]">hci_read_remote_version_information_complete_event_cb</a>
 <LI><a href="#[21b]">hci_rx_acl_data_event</a>
 <LI><a href="#[4f]">hci_rx_acl_data_event_cb</a>
 <LI><a href="#[190]">sma_CMAC_generate_tag</a>
 <LI><a href="#[18f]">smp_get_CSRK</a>
 <LI><a href="#[b5]">tsk_no_idle_check</a>
 <LI><a href="#[b2]">tsk_notify_idx</a>
 <LI><a href="#[161]">tsk_signal_resource_idx</a>
 <LI><a href="#[143]">LL_channel_selection_algorithm_2</a>
 <LI><a href="#[148]">LL_conn_check_unmapped_channel_in_ch_map</a>
 <LI><a href="#[141]">LL_conn_copy_tx_data_packet</a>
 <LI><a href="#[14a]">LL_conn_get_ctrl_flds_isr_p</a>
 <LI><a href="#[14b]">LL_conn_get_ctrl_pdu_ctrl_fld_p</a>
 <LI><a href="#[146]">LL_conn_modulo_37</a>
 <LI><a href="#[13c]">LL_conn_slave_latency_cancelation</a>
 <LI><a href="#[139]">LL_conn_time_t1_lessthan_t2</a>
 <LI><a href="#[145]">LL_pseudo_rand_num_gen</a>
 <LI><a href="#[151]">LL_cpe_get_ctrl_flds_common_p</a>
 <LI><a href="#[1bc]">fifoBuf_getFreeHeader</a>
 <LI><a href="#[f5]">GAT_srv_attr_direct_value_write</a>
 <LI><a href="#[fa]">GAT_srv_check_sec_perm</a>
 <LI><a href="#[fe]">GAT_srv_find_from_handle_p</a>
 <LI><a href="#[102]">GAT_srv_get_chr_decl_val</a>
 <LI><a href="#[104]">GAT_srv_get_chr_descr_val</a>
 <LI><a href="#[103]">GAT_srv_get_chr_val</a>
 <LI><a href="#[107]">GAT_srv_get_fast_buffer_val</a>
 <LI><a href="#[101]">GAT_srv_get_incl_srv_val</a>
 <LI><a href="#[f7]">GAT_srv_get_zip_val</a>
 <LI><a href="#[f9]">GAT_srv_set_cccd_val</a>
 <LI><a href="#[f8]">GAT_srv_set_zip_val</a>
 <LI><a href="#[f6]">aci_gatt_srv_attribute_modified_event_push</a>
 <LI><a href="#[15c]">LL_sched_calculate_priority</a>
 <LI><a href="#[154]">LL_sched_engine_manage_skip_cancel_slot</a>
 <LI><a href="#[152]">LL_sched_get_cntxt_common_p</a>
 <LI><a href="#[153]">LL_sched_get_cntxt_per_p</a>
 <LI><a href="#[155]">LL_sched_return_token</a>
 <LI><a href="#[15b]">LL_sched_time_t1_lessthan_t2</a>
 <LI><a href="#[16f]">PM_Check_And_Set</a>
 <LI><a href="#[242]">sma_generate_subkeys</a>
 <LI><a href="#[243]">sma_left_shift</a>
 <LI><a href="#[244]">tsk_bitmap_not_zero</a>
 <LI><a href="#[1a2]">Timer_StartFirstActive_sysT</a>
 <LI><a href="#[ba]">Timer_TryStartFirstActive</a>
 <LI><a href="#[c9]">GAT_att_db_find_attr_idx_from_handle</a>
 <LI><a href="#[c8]">GAT_att_db_find_attr_idx_with_conf_def</a>
 <LI><a href="#[ca]">GAT_att_db_find_attr_idx_with_handle</a>
 <LI><a href="#[cf]">GAT_att_db_get_att_idx</a>
 <LI><a href="#[ce]">GAT_att_db_get_last_group_attribute</a>
 <LI><a href="#[d2]">GAT_att_srv_alloc_resp_packt</a>
 <LI><a href="#[d5]">GAT_att_srv_common_check</a>
 <LI><a href="#[82]">GAT_att_srv_confirm_exc</a>
 <LI><a href="#[79]">GAT_att_srv_exchange_mtu_exc</a>
 <LI><a href="#[81]">GAT_att_srv_exec_wr_exc</a>
 <LI><a href="#[7b]">GAT_att_srv_find_by_type_val_exc</a>
 <LI><a href="#[7a]">GAT_att_srv_find_info_exc</a>
 <LI><a href="#[d3]">GAT_att_srv_get_exec_fn_id_by_op</a>
 <LI><a href="#[d6]">GAT_att_srv_get_handle_range</a>
 <LI><a href="#[80]">GAT_att_srv_prep_wr_exc</a>
 <LI><a href="#[7c]">GAT_att_srv_read_by_type_exc</a>
 <LI><a href="#[7d]">GAT_att_srv_read_exc</a>
 <LI><a href="#[7e]">GAT_att_srv_read_multi_exc</a>
 <LI><a href="#[f1]">GAT_att_srv_run</a>
 <LI><a href="#[ef]">GAT_att_srv_send_response</a>
 <LI><a href="#[e7]">GAT_att_srv_set_attr_value_check</a>
 <LI><a href="#[e0]">GAT_att_srv_value_read</a>
 <LI><a href="#[d7]">GAT_att_srv_write_err_packet</a>
 <LI><a href="#[7f]">GAT_att_srv_write_exc</a>
 <LI><a href="#[e9]">GAT_srv_find_by_handle_p</a>
 <LI><a href="#[d4]">PM_Get_Host_Pckt</a>
 <LI><a href="#[ec]">aci_gatt_srv_read_event_push</a>
 <LI><a href="#[db]">aci_hal_fw_error_event_push</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">HardFault_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_IRQHandler</a><BR>
 <LI><a href="#[244]">tsk_bitmap_not_zero</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[244]">tsk_bitmap_not_zero</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ADC_IRQHandler</a> from system_bluenrg_lp.o(i.ADC_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[1f]">BLE_AES_IRQHandler</a> from system_bluenrg_lp.o(i.BLE_AES_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[20]">BLE_ERROR_IRQHandler</a> from ble_event.o(i.BLE_ERROR_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[25]">BLE_RXTX_SEQ_IRQHandler</a> from system_bluenrg_lp.o(i.BLE_RXTX_SEQ_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[1e]">BLE_TX_RX_IRQHandler</a> from ble_event.o(i.BLE_TX_RX_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[24]">BLE_WKUP_IRQHandler</a> from ble_event.o(i.BLE_WKUP_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[23]">CPU_WKUP_IRQHandler</a> from ble_event.o(i.CPU_WKUP_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[1d]">DMA_IRQHandler</a> from bluenrg_lp_it.o(i.DMA_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[c]">FLASH_IRQHandler</a> from system_bluenrg_lp.o(i.FLASH_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[82]">GAT_att_srv_confirm_exc</a> from gat_att_srv.o(i.GAT_att_srv_confirm_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[79]">GAT_att_srv_exchange_mtu_exc</a> from gat_att_srv.o(i.GAT_att_srv_exchange_mtu_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[81]">GAT_att_srv_exec_wr_exc</a> from gat_att_srv.o(i.GAT_att_srv_exec_wr_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[7b]">GAT_att_srv_find_by_type_val_exc</a> from gat_att_srv.o(i.GAT_att_srv_find_by_type_val_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[7a]">GAT_att_srv_find_info_exc</a> from gat_att_srv.o(i.GAT_att_srv_find_info_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[80]">GAT_att_srv_prep_wr_exc</a> from gat_att_srv.o(i.GAT_att_srv_prep_wr_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[7c]">GAT_att_srv_read_by_type_exc</a> from gat_att_srv.o(i.GAT_att_srv_read_by_type_exc) referenced 2 times from gat_att_srv.o(.constdata)
 <LI><a href="#[7d]">GAT_att_srv_read_exc</a> from gat_att_srv.o(i.GAT_att_srv_read_exc) referenced 2 times from gat_att_srv.o(.constdata)
 <LI><a href="#[7e]">GAT_att_srv_read_multi_exc</a> from gat_att_srv.o(i.GAT_att_srv_read_multi_exc) referenced from gat_att_srv.o(.constdata)
 <LI><a href="#[7f]">GAT_att_srv_write_exc</a> from gat_att_srv.o(i.GAT_att_srv_write_exc) referenced 3 times from gat_att_srv.o(.constdata)
 <LI><a href="#[1b]">GPIOA_IRQHandler</a> from system_bluenrg_lp.o(i.GPIOA_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[1c]">GPIOB_IRQHandler</a> from system_bluenrg_lp.o(i.GPIOB_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[8]">HardFault_IRQHandler</a> from bluenrg_lp_it.o(i.HardFault_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[f]">I2C1_IRQHandler</a> from system_bluenrg_lp.o(i.I2C1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[10]">I2C2_IRQHandler</a> from system_bluenrg_lp.o(i.I2C2_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[15]">LPUART1_IRQHandler</a> from system_bluenrg_lp.o(i.LPUART1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[22]">MR_BLE_IRQHandler</a> from system_bluenrg_lp.o(i.MR_BLE_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[7]">NMI_IRQHandler</a> from ble_event.o(i.NMI_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[19]">PKA_IRQHandler</a> from pka_manager_bluenrg_lp.o(i.PKA_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[e]">PVD_IRQHandler</a> from system_bluenrg_lp.o(i.PVD_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[a]">PendSV_IRQHandler</a> from port.o(.emb_text) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[21]">RADIO_CTRL_IRQHandler</a> from system_bluenrg_lp.o(i.RADIO_CTRL_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[d]">RCC_IRQHandler</a> from system_bluenrg_lp.o(i.RCC_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[6]">RESET_HANDLER</a> from system_bluenrg_lp.o(i.RESET_HANDLER) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[17]">RTC_IRQHandler</a> from system_bluenrg_lp.o(i.RTC_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[11]">SPI1_IRQHandler</a> from system_bluenrg_lp.o(i.SPI1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[12]">SPI2_IRQHandler</a> from system_bluenrg_lp.o(i.SPI2_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[13]">SPI3_IRQHandler</a> from system_bluenrg_lp.o(i.SPI3_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[9]">SVC_IRQHandler</a> from port.o(i.SVC_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[b]">SysTick_IRQHandler</a> from port.o(i.SysTick_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[16]">TIM1_IRQHandler</a> from system_bluenrg_lp.o(i.TIM1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[26]">UART_DMAAbortOnError</a> from rf_driver_hal_uart.o(i.UART_DMAAbortOnError) referenced from rf_driver_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[1a]">UPCONV_IRQHandler</a> from system_bluenrg_lp.o(i.UPCONV_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[14]">USART1_IRQHandler</a> from bluenrg_lp_it.o(i.USART1_IRQHandler) referenced from system_bluenrg_lp.o(.intvec)
 <LI><a href="#[6d]">aci_att_clt_exec_write_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_exec_write_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[66]">aci_att_clt_find_by_type_value_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_find_by_type_value_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[65]">aci_att_clt_find_info_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_find_info_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[6c]">aci_att_clt_prepare_write_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_prepare_write_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[69]">aci_att_clt_read_blob_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_read_blob_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[6b]">aci_att_clt_read_by_group_type_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_read_by_group_type_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[67]">aci_att_clt_read_by_type_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_read_by_type_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[6a]">aci_att_clt_read_multiple_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_read_multiple_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[68]">aci_att_clt_read_resp_event_cb</a> from events_gatt.o(i.aci_att_clt_read_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[64]">aci_att_exchange_mtu_resp_event_cb</a> from events_gatt.o(i.aci_att_exchange_mtu_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[78]">aci_att_srv_exec_write_req_event_cb</a> from events_gatt.o(i.aci_att_srv_exec_write_req_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[77]">aci_att_srv_prepare_write_req_event_cb</a> from events_gatt.o(i.aci_att_srv_prepare_write_req_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[56]">aci_gap_addr_not_resolved_event_cb</a> from events_gap.o(i.aci_gap_addr_not_resolved_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[54]">aci_gap_bond_lost_event_cb</a> from events_smp.o(i.aci_gap_bond_lost_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[58]">aci_gap_keypress_notification_event_cb_ucfg</a> from stack_user_cfg.o(i.aci_gap_keypress_notification_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[50]">aci_gap_limited_discoverable_event_cb</a> from events_gap.o(i.aci_gap_limited_discoverable_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[57]">aci_gap_numeric_comparison_value_event_cb_ucfg</a> from stack_user_cfg.o(i.aci_gap_numeric_comparison_value_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[51]">aci_gap_pairing_complete_event_cb</a> from events_smp.o(i.aci_gap_pairing_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[52]">aci_gap_pass_key_req_event_cb</a> from events_smp.o(i.aci_gap_pass_key_req_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[55]">aci_gap_proc_complete_event_cb</a> from events_gap.o(i.aci_gap_proc_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[53]">aci_gap_slave_security_initiated_event_cb</a> from events_smp.o(i.aci_gap_slave_security_initiated_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[72]">aci_gatt_clt_disc_read_char_by_uuid_resp_event_cb</a> from events_gatt.o(i.aci_gatt_clt_disc_read_char_by_uuid_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[71]">aci_gatt_clt_error_resp_event_cb</a> from events_gatt.o(i.aci_gatt_clt_error_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[6e]">aci_gatt_clt_indication_event_cb</a> from events_gatt.o(i.aci_gatt_clt_indication_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[6f]">aci_gatt_clt_notification_event_cb</a> from events_gatt.o(i.aci_gatt_clt_notification_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[70]">aci_gatt_clt_proc_complete_event_cb</a> from events_gatt.o(i.aci_gatt_clt_proc_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[63]">aci_gatt_proc_timeout_event_cb</a> from events_gatt.o(i.aci_gatt_proc_timeout_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[62]">aci_gatt_srv_attribute_modified_event_cb</a> from events_gatt.o(i.aci_gatt_srv_attribute_modified_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[74]">aci_gatt_srv_confirmation_event_cb</a> from events_gatt.o(i.aci_gatt_srv_confirmation_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[75]">aci_gatt_srv_read_event_cb</a> from events_gatt.o(i.aci_gatt_srv_read_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[76]">aci_gatt_srv_write_event_cb</a> from events_gatt.o(i.aci_gatt_srv_write_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[73]">aci_gatt_tx_pool_available_event_cb</a> from events_gatt.o(i.aci_gatt_tx_pool_available_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[3f]">aci_hal_adv_scan_resp_data_update_event_cb</a> from events_llc.o(i.aci_hal_adv_scan_resp_data_update_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[3e]">aci_hal_fw_error_event_cb</a> from events_llc.o(i.aci_hal_fw_error_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[3d]">aci_hal_scan_req_report_event_cb_ucfg</a> from stack_user_cfg.o(i.aci_hal_scan_req_report_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[5c]">aci_l2cap_cfc_connection_event_cb_ucfg</a> from stack_user_cfg.o(i.aci_l2cap_cfc_connection_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[5f]">aci_l2cap_command_reject_event_cb</a> from events_l2cap.o(i.aci_l2cap_command_reject_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[5b]">aci_l2cap_connection_update_req_event_cb</a> from events_l2cap.o(i.aci_l2cap_connection_update_req_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[59]">aci_l2cap_connection_update_resp_event_cb</a> from events_l2cap.o(i.aci_l2cap_connection_update_resp_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[5d]">aci_l2cap_disconnection_complete_event_cb_ucfg</a> from stack_user_cfg.o(i.aci_l2cap_disconnection_complete_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[5e]">aci_l2cap_flow_control_credit_event_cb_ucfg</a> from stack_user_cfg.o(i.aci_l2cap_flow_control_credit_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[5a]">aci_l2cap_proc_timeout_event_cb</a> from events_l2cap.o(i.aci_l2cap_proc_timeout_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[61]">aci_l2cap_sdu_data_rx_event_cb_ucfg</a> from stack_user_cfg.o(i.aci_l2cap_sdu_data_rx_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[60]">aci_l2cap_sdu_data_tx_event_cb_ucfg</a> from stack_user_cfg.o(i.aci_l2cap_sdu_data_tx_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[27]">ble_evt_handle_task</a> from tasks.o(i.ble_evt_handle_task) referenced from tasks.o(i.System_Task_Init)
 <LI><a href="#[3c]">hci_authenticated_payload_timeout_expired_event_cb</a> from events_hci.o(i.hci_authenticated_payload_timeout_expired_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[3b]">hci_data_buffer_overflow_event_cb</a> from events_hci.o(i.hci_data_buffer_overflow_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[2c]">hci_disconnection_complete_event_cb</a> from events_hci.o(i.hci_disconnection_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[2d]">hci_encryption_change_event_cb</a> from events_hci.o(i.hci_encryption_change_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[2e]">hci_encryption_key_refresh_complete_event_cb</a> from events_hci.o(i.hci_encryption_key_refresh_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[30]">hci_le_advertising_report_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_advertising_report_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[38]">hci_le_advertising_set_terminated_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_advertising_set_terminated_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[48]">hci_le_channel_selection_algorithm_event_cb</a> from events_hci.o(i.hci_le_channel_selection_algorithm_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[2f]">hci_le_connection_complete_event_cb</a> from events_hci.o(i.hci_le_connection_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[4a]">hci_le_connection_iq_report_event_cb_ucfg</a> from events_hci.o(i.hci_le_connection_iq_report_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[40]">hci_le_connection_update_complete_event_cb</a> from events_hci.o(i.hci_le_connection_update_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[49]">hci_le_connectionless_iq_report_event_cb_ucfg</a> from events_hci.o(i.hci_le_connectionless_iq_report_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[4b]">hci_le_cte_request_failed_event_cb_ucfg</a> from events_hci.o(i.hci_le_cte_request_failed_event_cb_ucfg_weak) referenced from events_int.o(.constdata)
 <LI><a href="#[42]">hci_le_data_length_change_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_data_length_change_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[35]">hci_le_direct_advertising_report_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_direct_advertising_report_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[34]">hci_le_enhanced_connection_complete_event_cb</a> from events_hci.o(i.hci_le_enhanced_connection_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[36]">hci_le_extended_advertising_report_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_extended_advertising_report_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[33]">hci_le_generate_dhkey_complete_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_generate_dhkey_complete_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[31]">hci_le_long_term_key_request_event_cb</a> from events_hci.o(i.hci_le_long_term_key_request_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[4d]">hci_le_path_loss_threshold_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_path_loss_threshold_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[45]">hci_le_periodic_advertising_report_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_periodic_advertising_report_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[44]">hci_le_periodic_advertising_sync_established_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_periodic_advertising_sync_established_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[46]">hci_le_periodic_advertising_sync_lost_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_periodic_advertising_sync_lost_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[4c]">hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[43]">hci_le_phy_update_complete_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_phy_update_complete_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[32]">hci_le_read_local_p256_public_key_complete_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_read_local_p256_public_key_complete_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[41]">hci_le_read_remote_used_features_complete_event_cb</a> from events_hci.o(i.hci_le_read_remote_used_features_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[47]">hci_le_scan_request_received_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_scan_request_received_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[37]">hci_le_scan_timeout_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_scan_timeout_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[4e]">hci_le_transmit_power_reporting_event_cb_ucfg</a> from stack_user_cfg.o(i.hci_le_transmit_power_reporting_event_cb_ucfg) referenced from events_int.o(.constdata)
 <LI><a href="#[3a]">hci_number_of_completed_packets_event_cb</a> from events_hci.o(i.hci_number_of_completed_packets_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[39]">hci_read_remote_version_information_complete_event_cb</a> from events_hci.o(i.hci_read_remote_version_information_complete_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[4f]">hci_rx_acl_data_event_cb</a> from events_hci.o(i.hci_rx_acl_data_event_cb) referenced from events_int.o(.constdata)
 <LI><a href="#[2a]">prvIdleTask</a> from tasks_1.o(i.prvIdleTask) referenced from tasks_1.o(i.vTaskStartScheduler)
 <LI><a href="#[29]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[2b]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[28]">usart1_receive_handle_task</a> from tasks.o(i.usart1_receive_handle_task) referenced from tasks.o(i.System_Task_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[83]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[84]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[86]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[255]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[256]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[87]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[257]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[88]"></a>blue_unit_conversion</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, blue_unit_conversion.o(. text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul32
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioTimerValue
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioHostWakeupTime
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetPastSysTime
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_and_machine
</UL>

<P><STRONG><a name="[17c]"></a>CS_contextSave</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[1a5]"></a>CS_contextRestore</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[da]"></a>Osal_MemCpy</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, osal_memcpy.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_descr_val
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_decl_val
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_copy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_copy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event_copy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_CSRK
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_write
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_write_to_flat
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp_128bits
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_incl_srv_val
</UL>

<P><STRONG><a name="[8b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[258]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[259]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[25a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[25b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[25c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[25d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[25e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[25f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[260]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[261]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[262]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[263]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[264]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[265]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[266]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[267]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[268]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[269]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[26a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[26b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[26c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[90]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[26d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[26e]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[26f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[270]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[271]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[272]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[273]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[274]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[85]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[275]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[276]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[8a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[277]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[8c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; System_Task_Init &rArr; printLog &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[278]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[279]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[91]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[24c]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[192]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQHandler
</UL>

<P><STRONG><a name="[a]"></a>PendSV_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_IRQHandler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[95]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_supported_grouping_type
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[1a3]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>

<P><STRONG><a name="[27b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_DiffSysTimeMs
</UL>

<P><STRONG><a name="[27c]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StartTimerMs
</UL>

<P><STRONG><a name="[27d]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[27e]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_memmove4</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_block_copy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[27f]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memmove</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rt_memmove.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[280]"></a>__rt_memmove</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[9a]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[99]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[281]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[283]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>

<P><STRONG><a name="[284]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[8e]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[92]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[285]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>ACL_list_insert_tail</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, acl_list.o(i.ACL_list_insert_tail))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
</UL>

<P><STRONG><a name="[ee]"></a>ACL_list_remove</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, acl_list.o(i.ACL_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
</UL>

<P><STRONG><a name="[18]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[a2]"></a>AESMGR_Encrypt</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, aes_manager_bluenrg_lp.o(i.AESMGR_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AESMGR_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_aes128_encrypt
</UL>

<P><STRONG><a name="[9f]"></a>Acl_Transmit_Data</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, acl.o(i.Acl_Transmit_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
</UL>

<P><STRONG><a name="[112]"></a>App_PowerSaveLevel_Check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.App_PowerSaveLevel_Check))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
</UL>

<P><STRONG><a name="[156]"></a>BLECNTR_ClearSemareq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_ClearSemareq))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[15a]"></a>BLECNTR_GlobDisableBlue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobDisableBlue))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[158]"></a>BLECNTR_GlobEnableBlue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobEnableBlue))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[157]"></a>BLECNTR_GlobWriteSlot</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_GlobWriteSlot))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[b0]"></a>BLECNTR_IntGetIntStatusAnyHwError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusAnyHwError))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[ae]"></a>BLECNTR_IntGetIntStatusBitAct2Error</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusBitAct2Error))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[af]"></a>BLECNTR_IntGetIntStatusBitTimerOverrun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusBitTimerOverrun))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[a5]"></a>BLECNTR_IntGetIntStatusDone</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusDone))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[ad]"></a>BLECNTR_IntGetIntStatusNoactiveError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_IntGetIntStatusNoactiveError))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[13d]"></a>BLECNTR_PacketGetDataPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketGetDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[140]"></a>BLECNTR_PacketSetDataPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_PacketSetDataPtr))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[14d]"></a>BLECNTR_SmGetAccessAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetAccessAddr))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[147]"></a>BLECNTR_SmGetChannelMap</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetChannelMap))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>

<P><STRONG><a name="[14c]"></a>BLECNTR_SmGetHopIncr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmGetHopIncr))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[14e]"></a>BLECNTR_SmSetUnmappedChan</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_controller_bluenrg_lp.o(i.BLECNTR_SmSetUnmappedChan))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[a1]"></a>BLEPLAT_aes128_encrypt</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrgx_aes.o(i.BLEPLAT_aes128_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESMGR_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>

<P><STRONG><a name="[1f]"></a>BLE_AES_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.BLE_AES_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[20]"></a>BLE_ERROR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_event.o(i.BLE_ERROR_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[25]"></a>BLE_RXTX_SEQ_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.BLE_RXTX_SEQ_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[a4]"></a>BLE_STACK_RadioHandler</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, ll_isr.o(i.BLE_STACK_RadioHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = BLE_STACK_RadioHandler &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetAnchorPoint
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusNoactiveError
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusDone
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusBitTimerOverrun
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusBitAct2Error
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_IntGetIntStatusAnyHwError
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_per_state
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_done_cb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_current_taskslot_no
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_time_t1_ge_t2
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TX_RX_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>BLE_STACK_SleepCheck</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BLE_STACK_SleepCheck))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_no_idle_check
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
</UL>

<P><STRONG><a name="[1e]"></a>BLE_TX_RX_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_event.o(i.BLE_TX_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BLE_TX_RX_IRQHandler &rArr; BLE_STACK_RadioHandler &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_RadioTimerIsr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[24]"></a>BLE_WKUP_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_event.o(i.BLE_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BLE_WKUP_IRQHandler &rArr; HAL_VTIMER_WakeUpCallback &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_WakeUpCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[23]"></a>CPU_WKUP_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ble_event.o(i.CPU_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CPU_WKUP_IRQHandler &rArr; HAL_VTIMER_TimeoutCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_TimeoutCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[b9]"></a>CST_stop</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, stacklib_timers.o(i.CST_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TryStartFirstActive
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
</UL>

<P><STRONG><a name="[1d]"></a>DMA_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrg_lp_it.o(i.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[bc]"></a>DMA_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[bf]"></a>GAP_Terminate_Link</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gap_common.o(i.GAP_Terminate_Link))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate
</UL>

<P><STRONG><a name="[c2]"></a>GAT_att_cmn_get_conn_descr_p</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_get_conn_descr_p))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_alloc_resp_packt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
</UL>

<P><STRONG><a name="[c1]"></a>GAT_att_cmn_get_conn_index</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_get_conn_index))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_val
</UL>

<P><STRONG><a name="[c3]"></a>GAT_att_cmn_send</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_insert_tail
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
</UL>

<P><STRONG><a name="[c7]"></a>GAT_att_cmn_stop_timer</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, gat_att_cmn.o(i.GAT_att_cmn_stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GAT_att_cmn_stop_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirm_exc
</UL>

<P><STRONG><a name="[cb]"></a>GAT_att_db_find_by_def</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_by_def))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_with_conf_def
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attribute_handle
</UL>

<P><STRONG><a name="[cc]"></a>GAT_att_db_find_by_handle</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_by_handle))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_with_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_handle_p
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_incl_srv_val
</UL>

<P><STRONG><a name="[cd]"></a>GAT_att_db_find_from_handle</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_from_handle))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_from_handle_p
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
</UL>

<P><STRONG><a name="[d0]"></a>GAT_att_db_get_last_group_handle</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_get_last_group_handle))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
</UL>

<P><STRONG><a name="[d1]"></a>GAT_att_db_get_next</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_att_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
</UL>

<P><STRONG><a name="[dc]"></a>GAT_att_srv_extract_write_packet_data</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_extract_write_packet_data))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_direct_value_write
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
</UL>

<P><STRONG><a name="[ed]"></a>GAT_att_srv_resp</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_remove
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_resp
</UL>

<P><STRONG><a name="[f2]"></a>GAT_srv_attr_value_read</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_attr_value_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_attr_value_read &rArr; GAT_srv_get_attr_value &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
</UL>

<P><STRONG><a name="[f4]"></a>GAT_srv_attr_value_write</STRONG> (Thumb, 266 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_attr_value_write))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_direct_value_write
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_extract_write_packet_data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_zip_val
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
</UL>

<P><STRONG><a name="[de]"></a>GAT_srv_check_change_aware</STRONG> (Thumb, 154 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_check_change_aware))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_check_change_aware &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
</UL>

<P><STRONG><a name="[ea]"></a>GAT_srv_check_perms</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_check_perms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_check_perms &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_sec_perm
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_read
</UL>

<P><STRONG><a name="[df]"></a>GAT_srv_find_by_type_attr_p</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_find_by_type_attr_p))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_from_handle_p
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
</UL>

<P><STRONG><a name="[e3]"></a>GAT_srv_get_att_group_end_handle</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_att_group_end_handle))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_incl_srv_val
</UL>

<P><STRONG><a name="[e4]"></a>GAT_srv_get_attr_type</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_attr_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_get_attr_type &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
</UL>

<P><STRONG><a name="[eb]"></a>GAT_srv_get_attr_value</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_attr_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_srv_get_attr_value &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_descr_val
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_decl_val
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_write_to_flat
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_incl_srv_val
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_val
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_read
</UL>

<P><STRONG><a name="[105]"></a>GAT_srv_get_attribute_handle</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_attribute_handle))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_def
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_incl_srv_val
</UL>

<P><STRONG><a name="[106]"></a>GAT_srv_get_cccd_val</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_cccd_val))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_descr_val
</UL>

<P><STRONG><a name="[e8]"></a>GAT_srv_is_supported_grouping_type</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_is_supported_grouping_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_srv_is_supported_grouping_type &rArr; UUID_cmp_128bits &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp_128bits
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
</UL>

<P><STRONG><a name="[109]"></a>GAT_srv_resp</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, gat_srv_api.o(i.GAT_srv_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_exec_write_req_event
</UL>

<P><STRONG><a name="[1b]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.GPIOA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[1c]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.GPIOB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[167]"></a>HAL_CrashHandler</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, hal_miscutil.o(i.HAL_CrashHandler))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rf_driver_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, rf_driver_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rf_driver_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rf_driver_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[10c]"></a>HAL_MspInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rf_driver_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rf_driver_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[111]"></a>HAL_PWR_MNGR_Request</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, rf_driver_hal_power_manager.o(i.HAL_PWR_MNGR_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = HAL_PWR_MNGR_Request &rArr; PowerSave_Setup &rArr; MrBleBiasTrimConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_WakeupIOCallback
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PowerSaveLevel_Check
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetWakeupIOPolarity
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_GetWakeupSource
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableWakeupSource
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_ClearWakeupSource
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_PowerSaveLevelCheck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_PowerSaveLevelCheck
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_SleepCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[11b]"></a>HAL_PWR_MNGR_WakeupIOCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.HAL_PWR_MNGR_WakeupIOCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
</UL>

<P><STRONG><a name="[10e]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_driver_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[10f]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rf_driver_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[123]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_driver_hal_uart_ex.o(i.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_driver_hal_uart_ex.o(i.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_driver_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[11d]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, rf_driver_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_driver_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_VTIMER_ClearRadioTimerValue</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_ClearRadioTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_VTIMER_ClearRadioTimerValue &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TIMER_GetSysRfSetupTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearRadioTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[127]"></a>HAL_VTIMER_DiffSysTimeMs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_DiffSysTimeMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_VTIMER_DiffSysTimeMs &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[a6]"></a>HAL_VTIMER_GetCurrentSysTime</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_GetCurrentSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_VTIMER_GetCurrentSysTime &rArr; TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[113]"></a>HAL_VTIMER_PowerSaveLevelCheck</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_PowerSaveLevelCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_VTIMER_PowerSaveLevelCheck &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TIMER_GetSysRfSetupTime
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetRadioTimerValue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_SleepCheck
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
</UL>

<P><STRONG><a name="[b6]"></a>HAL_VTIMER_RadioTimerIsr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_RadioTimerIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_VTIMER_RadioTimerIsr &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_TX_RX_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>HAL_VTIMER_SetRadioTimerValue</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_SetRadioTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[129]"></a>HAL_VTIMER_SleepCheck</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_SleepCheck))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_PowerSaveLevelCheck
</UL>

<P><STRONG><a name="[12f]"></a>HAL_VTIMER_StartTimerMs</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_StartTimerMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_VTIMER_StartTimerMs &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_timer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[132]"></a>HAL_VTIMER_StartTimerSysTime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_StartTimerSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>

<P><STRONG><a name="[133]"></a>HAL_VTIMER_StopTimer</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TryStartFirstActive
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>

<P><STRONG><a name="[b8]"></a>HAL_VTIMER_TimeoutCallback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_TimeoutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_VTIMER_TimeoutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_WakeUpCallback
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>HAL_VTIMER_WakeUpCallback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rf_driver_hal_vtimer.o(i.HAL_VTIMER_WakeUpCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_VTIMER_WakeUpCallback &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_TimeoutCallback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[8]"></a>HardFault_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg_lp_it.o(i.HardFault_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[10]"></a>I2C2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.I2C2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[c5]"></a>L2C_send_frame</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, l2cap.o(i.L2C_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
</UL>

<P><STRONG><a name="[c0]"></a>LL_Disconnect_Link</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, ll_connect.o(i.LL_Disconnect_Link))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_conn_idx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_disconnect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_tx_terminate_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Terminate_Link
</UL>

<P><STRONG><a name="[16d]"></a>LL_PKA_GetData</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rf_driver_ll_pka_v7b.o(i.LL_PKA_GetData))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>LL_PKA_VerifyProcess</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf_driver_ll_pka_v7b.o(i.LL_PKA_VerifyProcess))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>LL_Send_ACL_Data</STRONG> (Thumb, 294 bytes, Stack size unknown bytes, ll_connect.o(i.LL_Send_ACL_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketSetDataPtr
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_PacketGetDataPtr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p_from_handle
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_next_taskslot
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_next_anchor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_is_slave
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_acl_blocked
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_enc_on
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_time_t1_lessthan_t2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_copy_tx_data_packet
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>

<P><STRONG><a name="[14f]"></a>LL_conn_calculate_ww</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_calculate_ww))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[144]"></a>LL_conn_get_cntxt_per_p</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_cntxt_per_p))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_conn_idx
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p_from_handle
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_disconnect
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_is_slave
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_data_p
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_flds_isr_p
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>

<P><STRONG><a name="[137]"></a>LL_conn_get_cntxt_per_p_from_handle</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_cntxt_per_p_from_handle))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[134]"></a>LL_conn_get_conn_idx</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_conn_idx))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
</UL>

<P><STRONG><a name="[13f]"></a>LL_conn_get_ctrl_pdu_data_p</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_ctrl_pdu_data_p))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[142]"></a>LL_conn_get_enc_on</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_enc_on))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_flds_isr_p
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[13e]"></a>LL_conn_get_tx_acl_blocked</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_tx_acl_blocked))
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_ctrl_pdu_ctrl_fld_p
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[13b]"></a>LL_conn_is_slave</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_is_slave))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[135]"></a>LL_cpe_get_tx_terminate_in_progress</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_get_tx_terminate_in_progress))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_ctrl_flds_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
</UL>

<P><STRONG><a name="[136]"></a>LL_cpe_set_disconnect</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_set_disconnect))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
</UL>

<P><STRONG><a name="[b3]"></a>LL_sched_engine</STRONG> (Thumb, 520 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_SetRadioTimerValue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioCloseTimeout
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobWriteSlot
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobEnableBlue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_GlobDisableBlue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_ClearSemareq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_return_token
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_common_p
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine_manage_skip_cancel_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[ab]"></a>LL_sched_get_cntxt_task</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_cntxt_task))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[a9]"></a>LL_sched_get_current_taskslot_no</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_current_taskslot_no))
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[ac]"></a>LL_sched_get_done_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_done_cb))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[138]"></a>LL_sched_get_next_anchor</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_next_anchor))
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[13a]"></a>LL_sched_get_next_taskslot</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_next_taskslot))
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_common_p
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[aa]"></a>LL_sched_get_per_state</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_per_state))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[150]"></a>LL_sched_set_taskslot_length_anchor</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_set_taskslot_length_anchor))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[a8]"></a>LL_sched_time_t1_ge_t2</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_time_t1_ge_t2))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine_manage_skip_cancel_slot
</UL>

<P><STRONG><a name="[15]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.LPUART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[22]"></a>MR_BLE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.MR_BLE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[149]"></a>Mem_Buff_block_copy</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_block_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_block_copy &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_copy_tx_data_packet
</UL>

<P><STRONG><a name="[15d]"></a>Mem_Buff_cmp</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
</UL>

<P><STRONG><a name="[170]"></a>Mem_Buff_get</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_get))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>

<P><STRONG><a name="[171]"></a>Mem_Buff_get_chain_count</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_get_chain_count))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>

<P><STRONG><a name="[172]"></a>Mem_Buff_get_chain_size</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_get_chain_size))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>

<P><STRONG><a name="[15f]"></a>Mem_Buff_read</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_read))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>

<P><STRONG><a name="[160]"></a>Mem_Buff_release</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_release))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_signal_resource_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>

<P><STRONG><a name="[162]"></a>Mem_Buff_resize</STRONG> (Thumb, 174 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_resize))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_signal_resource_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>

<P><STRONG><a name="[163]"></a>Mem_Buff_write</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_write))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
</UL>

<P><STRONG><a name="[164]"></a>MrBleBiasTrimConfig</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, system_bluenrg_lp.o(i.MrBleBiasTrimConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MrBleBiasTrimConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRFClockSource
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRC64MPLLPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[7]"></a>NMI_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_event.o(i.NMI_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CrashHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[15e]"></a>Osal_MemCmp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_cmp
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp_128bits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_cmp
</UL>

<P><STRONG><a name="[169]"></a>Osal_MemSet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, osal.o(i.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Osal_MemSet &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
</UL>

<P><STRONG><a name="[114]"></a>PKAMGR_PowerSaveLevelCheck</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pka_manager_bluenrg_lp.o(i.PKAMGR_PowerSaveLevelCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PKAMGR_PowerSaveLevelCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_SleepCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
</UL>

<P><STRONG><a name="[16a]"></a>PKAMGR_SleepCheck</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pka_manager.o(i.PKAMGR_SleepCheck))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_PowerSaveLevelCheck
</UL>

<P><STRONG><a name="[16b]"></a>PKAMGR_Unlock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pka_manager.o(i.PKAMGR_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_IRQHandler
</UL>

<P><STRONG><a name="[19]"></a>PKA_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, pka_manager_bluenrg_lp.o(i.PKA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PKA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PKA_VerifyProcess
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PKA_GetData
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKAMGR_Unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[dd]"></a>PM_Copy_Pckt_Data</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, pm.o(i.PM_Copy_Pckt_Data))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_copy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_copy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_copy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_copy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_resp_event_copy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_multiple_resp_event_copy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_type_resp_event_copy
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_group_type_resp_event_copy
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_blob_resp_event_copy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event_copy
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_info_resp_event_copy
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_by_type_value_resp_event_copy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_extract_write_packet_data
</UL>

<P><STRONG><a name="[16e]"></a>PM_Get_Pckt</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, pm.o(i.PM_Get_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Check_And_Set
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Host_Pckt
</UL>

<P><STRONG><a name="[e1]"></a>PM_Pckt_Cmp</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, pm.o(i.PM_Pckt_Cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Pckt_Cmp &rArr; Mem_Buff_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
</UL>

<P><STRONG><a name="[f0]"></a>PM_Release_Acl_Pckt</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, pm.o(i.PM_Release_Acl_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_release
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get_chain_count
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_cb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_cb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_cb
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_cb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_resp_event_cb
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_multiple_resp_event_cb
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_type_resp_event_cb
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_group_type_resp_event_cb
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_blob_resp_event_cb
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event_cb
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_info_resp_event_cb
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_by_type_value_resp_event_cb
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
</UL>

<P><STRONG><a name="[c4]"></a>PM_Resize_Pckt_Pdu_Size</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, pm.o(i.PM_Resize_Pckt_Pdu_Size))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Check_And_Set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_resize
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_get_chain_size
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
</UL>

<P><STRONG><a name="[e2]"></a>PM_Write_Pckt_Data</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, pm.o(i.PM_Write_Pckt_Data))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
</UL>

<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[21]"></a>RADIO_CTRL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.RADIO_CTRL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[d]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[6]"></a>RESET_HANDLER</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.RESET_HANDLER))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = RESET_HANDLER &rArr; main &rArr; System_Task_Init &rArr; printLog &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[182]"></a>RadioClockConfig</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, system_bluenrg_lp.o(i.RadioClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RadioClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRFClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[183]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[186]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[18a]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, segger_rtt_printf.o(i.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printLog
</UL>

<P><STRONG><a name="[18b]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 382 bytes, Stack size 128 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[fd]"></a>SMP_check_encryption_key_size</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_common.o(i.SMP_check_encryption_key_size))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_sec_perm
</UL>

<P><STRONG><a name="[fc]"></a>SMP_get_link_status</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, smp_common.o(i.SMP_get_link_status))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_sec_perm
</UL>

<P><STRONG><a name="[fb]"></a>SMP_get_remote_device_list_item</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, smp_common.o(i.SMP_get_remote_device_list_item))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_sec_perm
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_link_status
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_encryption_key_size
</UL>

<P><STRONG><a name="[f3]"></a>SMP_validate_signed_packet</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, smp_common.o(i.SMP_validate_signed_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SMP_validate_signed_packet &rArr; sma_CMAC_generate_tag &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_CSRK
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
</UL>

<P><STRONG><a name="[11]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[12]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[13]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.SPI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[9]"></a>SVC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.SysTick_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_IRQHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[195]"></a>SystemClockConfig</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, system_bluenrg_lp.o(i.SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemClockConfig &rArr; SystemTimer_TimeoutConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutExpired
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetRC64MPLLPrescaler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[196]"></a>SystemInit</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, system_bluenrg_lp.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemInit &rArr; SystemClockConfig &rArr; SystemTimer_TimeoutConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInterruptPriority
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutExpired
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioClockConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MrBleBiasTrimConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpsTrimConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>SystemTimer_TimeoutConfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, system_bluenrg_lp.o(i.SystemTimer_TimeoutConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemTimer_TimeoutConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpsTrimConfig
</UL>

<P><STRONG><a name="[17e]"></a>SystemTimer_TimeoutExpired</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.SystemTimer_TimeoutExpired))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpsTrimConfig
</UL>

<P><STRONG><a name="[198]"></a>System_Task_Init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(i.System_Task_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = System_Task_Init &rArr; printLog &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printLog
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>TIM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.TIM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[124]"></a>TIMER_ClearRadioTimerValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i.TIMER_ClearRadioTimerValue))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
</UL>

<P><STRONG><a name="[a7]"></a>TIMER_GetAnchorPoint</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rf_driver_ll_timer.o(i.TIMER_GetAnchorPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_GetAnchorPoint &rArr; TIMER_GetPastSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetPastSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
</UL>

<P><STRONG><a name="[125]"></a>TIMER_GetCurrentSysTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf_driver_ll_timer.o(i.TIMER_GetCurrentSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_GetCurrentSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_and_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StartTimerMs
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_SetRadioTimerValue
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_PowerSaveLevelCheck
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>

<P><STRONG><a name="[19c]"></a>TIMER_GetPastSysTime</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rf_driver_ll_timer.o(i.TIMER_GetPastSysTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER_GetPastSysTime &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_and_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetAnchorPoint
</UL>

<P><STRONG><a name="[12a]"></a>TIMER_GetRadioTimerValue</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i.TIMER_GetRadioTimerValue))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_PowerSaveLevelCheck
</UL>

<P><STRONG><a name="[159]"></a>TIMER_SetRadioCloseTimeout</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i.TIMER_SetRadioCloseTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[19e]"></a>TIMER_SetRadioHostWakeupTime</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rf_driver_ll_timer.o(i.TIMER_SetRadioHostWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_SetRadioHostWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>

<P><STRONG><a name="[19f]"></a>TIMER_SetRadioTimerValue</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, rf_driver_ll_timer.o(i.TIMER_SetRadioTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_time_and_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
</UL>

<P><STRONG><a name="[1a0]"></a>TIMER_StartCalibration</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rf_driver_ll_timer.o(i.TIMER_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_StartCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_start_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_callback
</UL>

<P><STRONG><a name="[1a]"></a>UPCONV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.UPCONV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[14]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluenrg_lp_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg_lp.o(.intvec)
</UL>
<P><STRONG><a name="[ff]"></a>UUID_cmp</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, uuid.o(i.UUID_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
</UL>

<P><STRONG><a name="[108]"></a>UUID_cmp_128bits</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, uuid.o(i.UUID_cmp_128bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UUID_cmp_128bits &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_supported_grouping_type
</UL>

<P><STRONG><a name="[e5]"></a>UUID_get_value_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, uuid.o(i.UUID_get_value_p))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
</UL>

<P><STRONG><a name="[100]"></a>UUID_write_to_flat</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, uuid.o(i.UUID_write_to_flat))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_decl_val
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
</UL>

<P><STRONG><a name="[e6]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6dsox_reg.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_exec_fn_id_by_op
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
</UL>

<P><STRONG><a name="[126]"></a>__TIMER_GetSysRfSetupTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i.__TIMER_GetSysRfSetupTime))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_PowerSaveLevelCheck
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_ClearRadioTimerValue
</UL>

<P><STRONG><a name="[181]"></a>__low_level_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, system_bluenrg_lp.o(i.__low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __low_level_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_contextRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[1a7]"></a>aci_att_clt_exec_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_exec_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_exec_write_resp_event_cb
</UL>

<P><STRONG><a name="[6d]"></a>aci_att_clt_exec_write_resp_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_exec_write_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_exec_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>aci_att_clt_find_by_type_value_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_find_by_type_value_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_by_type_value_resp_event_cb
</UL>

<P><STRONG><a name="[66]"></a>aci_att_clt_find_by_type_value_resp_event_cb</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_find_by_type_value_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_by_type_value_resp_event_copy
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_by_type_value_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>aci_att_clt_find_by_type_value_resp_event_copy</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_find_by_type_value_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_by_type_value_resp_event_cb
</UL>

<P><STRONG><a name="[1ab]"></a>aci_att_clt_find_info_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_find_info_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_info_resp_event_cb
</UL>

<P><STRONG><a name="[65]"></a>aci_att_clt_find_info_resp_event_cb</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_find_info_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_info_resp_event_copy
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_info_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>aci_att_clt_find_info_resp_event_copy</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_find_info_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_find_info_resp_event_cb
</UL>

<P><STRONG><a name="[1ad]"></a>aci_att_clt_prepare_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_prepare_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event_cb
</UL>

<P><STRONG><a name="[6c]"></a>aci_att_clt_prepare_write_resp_event_cb</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_prepare_write_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event_copy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1ac]"></a>aci_att_clt_prepare_write_resp_event_copy</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_prepare_write_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_prepare_write_resp_event_cb
</UL>

<P><STRONG><a name="[1af]"></a>aci_att_clt_read_blob_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_blob_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_blob_resp_event_cb
</UL>

<P><STRONG><a name="[69]"></a>aci_att_clt_read_blob_resp_event_cb</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_blob_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_blob_resp_event_copy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_blob_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>aci_att_clt_read_blob_resp_event_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_read_blob_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_blob_resp_event_cb
</UL>

<P><STRONG><a name="[1b1]"></a>aci_att_clt_read_by_group_type_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_by_group_type_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_group_type_resp_event_cb
</UL>

<P><STRONG><a name="[6b]"></a>aci_att_clt_read_by_group_type_resp_event_cb</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_by_group_type_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_group_type_resp_event_copy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_group_type_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>aci_att_clt_read_by_group_type_resp_event_copy</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_read_by_group_type_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_group_type_resp_event_cb
</UL>

<P><STRONG><a name="[1b3]"></a>aci_att_clt_read_by_type_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_by_type_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_type_resp_event_cb
</UL>

<P><STRONG><a name="[67]"></a>aci_att_clt_read_by_type_resp_event_cb</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_by_type_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_type_resp_event_copy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_type_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1b2]"></a>aci_att_clt_read_by_type_resp_event_copy</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_read_by_type_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_by_type_resp_event_cb
</UL>

<P><STRONG><a name="[1b5]"></a>aci_att_clt_read_multiple_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_multiple_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_multiple_resp_event_cb
</UL>

<P><STRONG><a name="[6a]"></a>aci_att_clt_read_multiple_resp_event_cb</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_multiple_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_multiple_resp_event_copy
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_multiple_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>aci_att_clt_read_multiple_resp_event_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_read_multiple_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_multiple_resp_event_cb
</UL>

<P><STRONG><a name="[1b7]"></a>aci_att_clt_read_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_resp_event_cb
</UL>

<P><STRONG><a name="[68]"></a>aci_att_clt_read_resp_event_cb</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_clt_read_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_resp_event_copy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>aci_att_clt_read_resp_event_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, events.o(i.aci_att_clt_read_resp_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_clt_read_resp_event_cb
</UL>

<P><STRONG><a name="[1b8]"></a>aci_att_exchange_mtu_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_exchange_mtu_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exchange_mtu_resp_event_cb
</UL>

<P><STRONG><a name="[64]"></a>aci_att_exchange_mtu_resp_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_exchange_mtu_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exchange_mtu_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1b9]"></a>aci_att_srv_exec_write_req_event</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events.o(i.aci_att_srv_exec_write_req_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_att_srv_exec_write_req_event &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_exec_write_req_event_cb
</UL>

<P><STRONG><a name="[78]"></a>aci_att_srv_exec_write_req_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_srv_exec_write_req_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_att_srv_exec_write_req_event_cb &rArr; aci_att_srv_exec_write_req_event &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_exec_write_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>aci_att_srv_prepare_write_req_event</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events.o(i.aci_att_srv_prepare_write_req_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_att_srv_prepare_write_req_event &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_cb
</UL>

<P><STRONG><a name="[77]"></a>aci_att_srv_prepare_write_req_event_cb</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, events_gatt.o(i.aci_att_srv_prepare_write_req_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_att_srv_prepare_write_req_event_cb &rArr; aci_att_srv_prepare_write_req_event &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>aci_att_srv_prepare_write_req_event_copy</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, events.o(i.aci_att_srv_prepare_write_req_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_srv_prepare_write_req_event_cb
</UL>

<P><STRONG><a name="[d9]"></a>aci_event_fifo_push</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, events.o(i.aci_event_fifo_push))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_push
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exec_wr_exc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirm_exc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push
</UL>

<P><STRONG><a name="[d8]"></a>aci_event_fifo_push_header</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, events.o(i.aci_event_fifo_push_header))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoBuf_getFreeHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_push
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exec_wr_exc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_confirm_exc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push
</UL>

<P><STRONG><a name="[1bd]"></a>aci_gap_addr_not_resolved_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gap.o(i.aci_gap_addr_not_resolved_event))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_addr_not_resolved_event_cb
</UL>

<P><STRONG><a name="[56]"></a>aci_gap_addr_not_resolved_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_gap.o(i.aci_gap_addr_not_resolved_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_addr_not_resolved_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>aci_gap_bond_lost_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_bond_lost_event))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_bond_lost_event_cb
</UL>

<P><STRONG><a name="[54]"></a>aci_gap_bond_lost_event_cb</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_bond_lost_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_bond_lost_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1c0]"></a>aci_gap_keypress_notification_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_keypress_notification_event))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_keypress_notification_event_cb
</UL>

<P><STRONG><a name="[1bf]"></a>aci_gap_keypress_notification_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_keypress_notification_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_keypress_notification_event
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_keypress_notification_event_cb_ucfg
</UL>

<P><STRONG><a name="[58]"></a>aci_gap_keypress_notification_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.aci_gap_keypress_notification_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_gap_keypress_notification_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_keypress_notification_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>aci_gap_limited_discoverable_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gap.o(i.aci_gap_limited_discoverable_event))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_cb
</UL>

<P><STRONG><a name="[50]"></a>aci_gap_limited_discoverable_event_cb</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, events_gap.o(i.aci_gap_limited_discoverable_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1c3]"></a>aci_gap_numeric_comparison_value_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_numeric_comparison_value_event))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event_cb
</UL>

<P><STRONG><a name="[1c2]"></a>aci_gap_numeric_comparison_value_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_numeric_comparison_value_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event_cb_ucfg
</UL>

<P><STRONG><a name="[57]"></a>aci_gap_numeric_comparison_value_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.aci_gap_numeric_comparison_value_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_gap_numeric_comparison_value_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1c4]"></a>aci_gap_pairing_complete_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.aci_gap_pairing_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_cb
</UL>

<P><STRONG><a name="[51]"></a>aci_gap_pairing_complete_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_pairing_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>aci_gap_pass_key_req_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.aci_gap_pass_key_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_req_event_cb
</UL>

<P><STRONG><a name="[52]"></a>aci_gap_pass_key_req_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_pass_key_req_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>aci_gap_proc_complete_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.aci_gap_proc_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_cb
</UL>

<P><STRONG><a name="[55]"></a>aci_gap_proc_complete_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_gap.o(i.aci_gap_proc_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>aci_gap_slave_security_initiated_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_slave_security_initiated_event))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_slave_security_initiated_event_cb
</UL>

<P><STRONG><a name="[53]"></a>aci_gap_slave_security_initiated_event_cb</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, events_smp.o(i.aci_gap_slave_security_initiated_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_slave_security_initiated_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>aci_gap_terminate</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, aci_gap.o(i.aci_gap_terminate))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Terminate_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event
</UL>

<P><STRONG><a name="[1c9]"></a>aci_gatt_clt_disc_read_char_by_uuid_resp_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.aci_gatt_clt_disc_read_char_by_uuid_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_disc_read_char_by_uuid_resp_event_cb
</UL>

<P><STRONG><a name="[72]"></a>aci_gatt_clt_disc_read_char_by_uuid_resp_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_disc_read_char_by_uuid_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_disc_read_char_by_uuid_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>aci_gatt_clt_error_resp_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.aci_gatt_clt_error_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_error_resp_event_cb
</UL>

<P><STRONG><a name="[71]"></a>aci_gatt_clt_error_resp_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_error_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_error_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>aci_gatt_clt_indication_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_indication_event))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_cb
</UL>

<P><STRONG><a name="[6e]"></a>aci_gatt_clt_indication_event_cb</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_indication_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_copy
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>aci_gatt_clt_indication_event_copy</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, events.o(i.aci_gatt_clt_indication_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_indication_event_cb
</UL>

<P><STRONG><a name="[1ce]"></a>aci_gatt_clt_notification_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.aci_gatt_clt_notification_event))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_cb
</UL>

<P><STRONG><a name="[6f]"></a>aci_gatt_clt_notification_event_cb</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_notification_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>aci_gatt_clt_notification_event_copy</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, events.o(i.aci_gatt_clt_notification_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_notification_event_cb
</UL>

<P><STRONG><a name="[1cf]"></a>aci_gatt_clt_proc_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_proc_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_proc_complete_event_cb
</UL>

<P><STRONG><a name="[70]"></a>aci_gatt_clt_proc_complete_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_clt_proc_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_clt_proc_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>aci_gatt_proc_timeout_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_proc_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_timeout_event_cb
</UL>

<P><STRONG><a name="[63]"></a>aci_gatt_proc_timeout_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_proc_timeout_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_timeout_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>aci_gatt_srv_attribute_modified_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.aci_gatt_srv_attribute_modified_event))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_cb
</UL>

<P><STRONG><a name="[62]"></a>aci_gatt_srv_attribute_modified_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_srv_attribute_modified_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>aci_gatt_srv_confirmation_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_srv_confirmation_event))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_confirmation_event_cb
</UL>

<P><STRONG><a name="[74]"></a>aci_gatt_srv_confirmation_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_srv_confirmation_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_confirmation_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1d3]"></a>aci_gatt_srv_read_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_srv_read_event))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_cb
</UL>

<P><STRONG><a name="[75]"></a>aci_gatt_srv_read_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_srv_read_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>aci_gatt_srv_write_event</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, events.o(i.aci_gatt_srv_write_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_write_event &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_cb
</UL>

<P><STRONG><a name="[76]"></a>aci_gatt_srv_write_event_cb</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_srv_write_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_gatt_srv_write_event_cb &rArr; aci_gatt_srv_write_event &rArr; GAT_srv_resp &rArr; GAT_att_srv_resp &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>aci_gatt_srv_write_event_copy</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, events.o(i.aci_gatt_srv_write_event_copy))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_write_event_cb
</UL>

<P><STRONG><a name="[1d6]"></a>aci_gatt_tx_pool_available_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.aci_gatt_tx_pool_available_event))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_tx_pool_available_event_cb
</UL>

<P><STRONG><a name="[73]"></a>aci_gatt_tx_pool_available_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_gatt.o(i.aci_gatt_tx_pool_available_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_tx_pool_available_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>aci_hal_adv_scan_resp_data_update_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_llc.o(i.aci_hal_adv_scan_resp_data_update_event))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_adv_scan_resp_data_update_event_cb
</UL>

<P><STRONG><a name="[3f]"></a>aci_hal_adv_scan_resp_data_update_event_cb</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, events_llc.o(i.aci_hal_adv_scan_resp_data_update_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_adv_scan_resp_data_update_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1d8]"></a>aci_hal_fw_error_event</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_event.o(i.aci_hal_fw_error_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_hal_fw_error_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_cb
</UL>

<P><STRONG><a name="[3e]"></a>aci_hal_fw_error_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_llc.o(i.aci_hal_fw_error_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_hal_fw_error_event_cb &rArr; aci_hal_fw_error_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1da]"></a>aci_hal_scan_req_report_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_llc.o(i.aci_hal_scan_req_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_scan_req_report_event_cb
</UL>

<P><STRONG><a name="[1d9]"></a>aci_hal_scan_req_report_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_llc.o(i.aci_hal_scan_req_report_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_scan_req_report_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_scan_req_report_event_cb_ucfg
</UL>

<P><STRONG><a name="[3d]"></a>aci_hal_scan_req_report_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.aci_hal_scan_req_report_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_hal_scan_req_report_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_scan_req_report_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1dc]"></a>aci_l2cap_cfc_connection_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_cfc_connection_event))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_cfc_connection_event_cb
</UL>

<P><STRONG><a name="[1db]"></a>aci_l2cap_cfc_connection_event_cb</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_cfc_connection_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_cfc_connection_event
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_cfc_connection_event_cb_ucfg
</UL>

<P><STRONG><a name="[5c]"></a>aci_l2cap_cfc_connection_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.aci_l2cap_cfc_connection_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_l2cap_cfc_connection_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_cfc_connection_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>aci_l2cap_command_reject_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_command_reject_event))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event_cb
</UL>

<P><STRONG><a name="[5f]"></a>aci_l2cap_command_reject_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_command_reject_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>aci_l2cap_connection_update_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_connection_update_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_cb
</UL>

<P><STRONG><a name="[5b]"></a>aci_l2cap_connection_update_req_event_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_connection_update_req_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1df]"></a>aci_l2cap_connection_update_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_connection_update_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_resp_event_cb
</UL>

<P><STRONG><a name="[59]"></a>aci_l2cap_connection_update_resp_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_connection_update_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1e1]"></a>aci_l2cap_disconnection_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_disconnection_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_disconnection_complete_event_cb
</UL>

<P><STRONG><a name="[1e0]"></a>aci_l2cap_disconnection_complete_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_disconnection_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_disconnection_complete_event
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_disconnection_complete_event_cb_ucfg
</UL>

<P><STRONG><a name="[5d]"></a>aci_l2cap_disconnection_complete_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.aci_l2cap_disconnection_complete_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_l2cap_disconnection_complete_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_disconnection_complete_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1e3]"></a>aci_l2cap_flow_control_credit_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_flow_control_credit_event))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_flow_control_credit_event_cb
</UL>

<P><STRONG><a name="[1e2]"></a>aci_l2cap_flow_control_credit_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_flow_control_credit_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_flow_control_credit_event
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_flow_control_credit_event_cb_ucfg
</UL>

<P><STRONG><a name="[5e]"></a>aci_l2cap_flow_control_credit_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.aci_l2cap_flow_control_credit_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_l2cap_flow_control_credit_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_flow_control_credit_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>aci_l2cap_proc_timeout_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_proc_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event_cb
</UL>

<P><STRONG><a name="[5a]"></a>aci_l2cap_proc_timeout_event_cb</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_proc_timeout_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>aci_l2cap_proc_timeout_event_copy</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, events.o(i.aci_l2cap_proc_timeout_event_copy))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event_cb
</UL>

<P><STRONG><a name="[1e7]"></a>aci_l2cap_sdu_data_rx_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_sdu_data_rx_event))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_sdu_data_rx_event_cb
</UL>

<P><STRONG><a name="[1e6]"></a>aci_l2cap_sdu_data_rx_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_sdu_data_rx_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_sdu_data_rx_event
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_sdu_data_rx_event_cb_ucfg
</UL>

<P><STRONG><a name="[61]"></a>aci_l2cap_sdu_data_rx_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.aci_l2cap_sdu_data_rx_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_l2cap_sdu_data_rx_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_sdu_data_rx_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>aci_l2cap_sdu_data_tx_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_sdu_data_tx_event))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_sdu_data_tx_event_cb
</UL>

<P><STRONG><a name="[1e8]"></a>aci_l2cap_sdu_data_tx_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, events_l2cap.o(i.aci_l2cap_sdu_data_tx_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_sdu_data_tx_event
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_sdu_data_tx_event_cb_ucfg
</UL>

<P><STRONG><a name="[60]"></a>aci_l2cap_sdu_data_tx_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.aci_l2cap_sdu_data_tx_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = aci_l2cap_sdu_data_tx_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_sdu_data_tx_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[245]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tasks_1.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[1ec]"></a>hci_authenticated_payload_timeout_expired_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_authenticated_payload_timeout_expired_event))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_authenticated_payload_timeout_expired_event_cb
</UL>

<P><STRONG><a name="[3c]"></a>hci_authenticated_payload_timeout_expired_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_hci.o(i.hci_authenticated_payload_timeout_expired_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_authenticated_payload_timeout_expired_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>hci_data_buffer_overflow_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_data_buffer_overflow_event))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_data_buffer_overflow_event_cb
</UL>

<P><STRONG><a name="[3b]"></a>hci_data_buffer_overflow_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_hci.o(i.hci_data_buffer_overflow_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_data_buffer_overflow_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>hci_disconnection_complete_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.hci_disconnection_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_cb
</UL>

<P><STRONG><a name="[2c]"></a>hci_disconnection_complete_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_hci.o(i.hci_disconnection_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>hci_encryption_change_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.hci_encryption_change_event))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_cb
</UL>

<P><STRONG><a name="[2d]"></a>hci_encryption_change_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_hci.o(i.hci_encryption_change_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>hci_encryption_key_refresh_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_encryption_key_refresh_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_cb
</UL>

<P><STRONG><a name="[2e]"></a>hci_encryption_key_refresh_complete_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_hci.o(i.hci_encryption_key_refresh_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1f2]"></a>hci_le_advertising_report_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_advertising_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_cb
</UL>

<P><STRONG><a name="[1f1]"></a>hci_le_advertising_report_event_cb</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_advertising_report_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_cb_ucfg
</UL>

<P><STRONG><a name="[30]"></a>hci_le_advertising_report_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_advertising_report_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_advertising_report_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>hci_le_advertising_set_terminated_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_advertising_set_terminated_event))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_set_terminated_event_cb
</UL>

<P><STRONG><a name="[1f3]"></a>hci_le_advertising_set_terminated_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_advertising_set_terminated_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_set_terminated_event
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_set_terminated_event_cb_ucfg
</UL>

<P><STRONG><a name="[38]"></a>hci_le_advertising_set_terminated_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_advertising_set_terminated_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_advertising_set_terminated_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_set_terminated_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>hci_le_channel_selection_algorithm_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_channel_selection_algorithm_event))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_channel_selection_algorithm_event_cb
</UL>

<P><STRONG><a name="[48]"></a>hci_le_channel_selection_algorithm_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_channel_selection_algorithm_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_channel_selection_algorithm_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>hci_le_connection_complete_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.hci_le_connection_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_cb
</UL>

<P><STRONG><a name="[2f]"></a>hci_le_connection_complete_event_cb</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connection_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>hci_le_connection_iq_report_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connection_iq_report_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[28a]"></a>hci_le_connection_iq_report_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connection_iq_report_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[1f7]"></a>hci_le_connection_update_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connection_update_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_cb
</UL>

<P><STRONG><a name="[40]"></a>hci_le_connection_update_complete_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connection_update_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>hci_le_connectionless_iq_report_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connectionless_iq_report_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[28b]"></a>hci_le_connectionless_iq_report_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_connectionless_iq_report_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[4b]"></a>hci_le_cte_request_failed_event_cb_ucfg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_cte_request_failed_event_cb_ucfg_weak))
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[28c]"></a>hci_le_cte_request_failed_event_cb_ucfg_weak</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_cte_request_failed_event_cb_ucfg_weak), UNUSED)

<P><STRONG><a name="[1f9]"></a>hci_le_data_length_change_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_data_length_change_event))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_length_change_event_cb
</UL>

<P><STRONG><a name="[1f8]"></a>hci_le_data_length_change_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_data_length_change_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_length_change_event
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_length_change_event_cb_ucfg
</UL>

<P><STRONG><a name="[42]"></a>hci_le_data_length_change_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_data_length_change_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_data_length_change_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_length_change_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>hci_le_direct_advertising_report_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_direct_advertising_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event_cb
</UL>

<P><STRONG><a name="[1fa]"></a>hci_le_direct_advertising_report_event_cb</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_direct_advertising_report_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event_cb_ucfg
</UL>

<P><STRONG><a name="[35]"></a>hci_le_direct_advertising_report_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_direct_advertising_report_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_direct_advertising_report_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>hci_le_encrypt</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, hci_encryption_pka.o(i.hci_le_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_aes128_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_generate_subkeys
</UL>

<P><STRONG><a name="[1fd]"></a>hci_le_enhanced_connection_complete_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.hci_le_enhanced_connection_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_cb
</UL>

<P><STRONG><a name="[34]"></a>hci_le_enhanced_connection_complete_event_cb</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_enhanced_connection_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>hci_le_extended_advertising_report_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_event.o(i.hci_le_extended_advertising_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_extended_advertising_report_event_cb
</UL>

<P><STRONG><a name="[1fe]"></a>hci_le_extended_advertising_report_event_cb</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_extended_advertising_report_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_extended_advertising_report_event
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_extended_advertising_report_event_cb_ucfg
</UL>

<P><STRONG><a name="[36]"></a>hci_le_extended_advertising_report_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_extended_advertising_report_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_extended_advertising_report_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_extended_advertising_report_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[201]"></a>hci_le_generate_dhkey_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_generate_dhkey_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_cb
</UL>

<P><STRONG><a name="[200]"></a>hci_le_generate_dhkey_complete_event_cb</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_generate_dhkey_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_cb_ucfg
</UL>

<P><STRONG><a name="[33]"></a>hci_le_generate_dhkey_complete_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_generate_dhkey_complete_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_generate_dhkey_complete_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[202]"></a>hci_le_long_term_key_request_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_long_term_key_request_event))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event_cb
</UL>

<P><STRONG><a name="[31]"></a>hci_le_long_term_key_request_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_long_term_key_request_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[204]"></a>hci_le_path_loss_threshold_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_path_loss_threshold_event))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_path_loss_threshold_event_cb
</UL>

<P><STRONG><a name="[203]"></a>hci_le_path_loss_threshold_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_path_loss_threshold_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_path_loss_threshold_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_path_loss_threshold_event_cb_ucfg
</UL>

<P><STRONG><a name="[4d]"></a>hci_le_path_loss_threshold_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_path_loss_threshold_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_path_loss_threshold_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_path_loss_threshold_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>hci_le_periodic_advertising_report_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_report_event_cb
</UL>

<P><STRONG><a name="[205]"></a>hci_le_periodic_advertising_report_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_report_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_report_event
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_report_event_cb_ucfg
</UL>

<P><STRONG><a name="[45]"></a>hci_le_periodic_advertising_report_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_periodic_advertising_report_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_periodic_advertising_report_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_report_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[208]"></a>hci_le_periodic_advertising_sync_established_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_sync_established_event))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_sync_established_event_cb
</UL>

<P><STRONG><a name="[207]"></a>hci_le_periodic_advertising_sync_established_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_sync_established_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_sync_established_event
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_sync_established_event_cb_ucfg
</UL>

<P><STRONG><a name="[44]"></a>hci_le_periodic_advertising_sync_established_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_periodic_advertising_sync_established_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_periodic_advertising_sync_established_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_sync_established_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[20a]"></a>hci_le_periodic_advertising_sync_lost_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_sync_lost_event))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_sync_lost_event_cb
</UL>

<P><STRONG><a name="[209]"></a>hci_le_periodic_advertising_sync_lost_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_sync_lost_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_sync_lost_event
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_sync_lost_event_cb_ucfg
</UL>

<P><STRONG><a name="[46]"></a>hci_le_periodic_advertising_sync_lost_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_periodic_advertising_sync_lost_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_periodic_advertising_sync_lost_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_sync_lost_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[20c]"></a>hci_le_periodic_advertising_sync_transfer_received_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_sync_transfer_received_event))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_sync_transfer_received_event_cb
</UL>

<P><STRONG><a name="[20b]"></a>hci_le_periodic_advertising_sync_transfer_received_event_cb</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_periodic_advertising_sync_transfer_received_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_sync_transfer_received_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg
</UL>

<P><STRONG><a name="[4c]"></a>hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_periodic_advertising_sync_transfer_received_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_periodic_advertising_sync_transfer_received_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[20e]"></a>hci_le_phy_update_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_phy_update_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_phy_update_complete_event_cb
</UL>

<P><STRONG><a name="[20d]"></a>hci_le_phy_update_complete_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_phy_update_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_phy_update_complete_event
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_phy_update_complete_event_cb_ucfg
</UL>

<P><STRONG><a name="[43]"></a>hci_le_phy_update_complete_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_phy_update_complete_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_phy_update_complete_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_phy_update_complete_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[210]"></a>hci_le_read_local_p256_public_key_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_read_local_p256_public_key_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_cb
</UL>

<P><STRONG><a name="[20f]"></a>hci_le_read_local_p256_public_key_complete_event_cb</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_read_local_p256_public_key_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_cb_ucfg
</UL>

<P><STRONG><a name="[32]"></a>hci_le_read_local_p256_public_key_complete_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_read_local_p256_public_key_complete_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_read_local_p256_public_key_complete_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[211]"></a>hci_le_read_remote_used_features_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_read_remote_used_features_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event_cb
</UL>

<P><STRONG><a name="[41]"></a>hci_le_read_remote_used_features_complete_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_read_remote_used_features_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[213]"></a>hci_le_scan_request_received_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_scan_request_received_event))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_request_received_event_cb
</UL>

<P><STRONG><a name="[212]"></a>hci_le_scan_request_received_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_scan_request_received_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_request_received_event
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_request_received_event_cb_ucfg
</UL>

<P><STRONG><a name="[47]"></a>hci_le_scan_request_received_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_scan_request_received_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_scan_request_received_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_request_received_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[215]"></a>hci_le_scan_timeout_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_scan_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_timeout_event_cb
</UL>

<P><STRONG><a name="[214]"></a>hci_le_scan_timeout_event_cb</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_scan_timeout_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_timeout_event
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_timeout_event_cb_ucfg
</UL>

<P><STRONG><a name="[37]"></a>hci_le_scan_timeout_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_scan_timeout_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_scan_timeout_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_scan_timeout_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[217]"></a>hci_le_transmit_power_reporting_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_transmit_power_reporting_event))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_transmit_power_reporting_event_cb
</UL>

<P><STRONG><a name="[216]"></a>hci_le_transmit_power_reporting_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, events_hci.o(i.hci_le_transmit_power_reporting_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_transmit_power_reporting_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_transmit_power_reporting_event_cb_ucfg
</UL>

<P><STRONG><a name="[4e]"></a>hci_le_transmit_power_reporting_event_cb_ucfg</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stack_user_cfg.o(i.hci_le_transmit_power_reporting_event_cb_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = hci_le_transmit_power_reporting_event_cb_ucfg
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_transmit_power_reporting_event_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[219]"></a>hci_number_of_completed_packets_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_number_of_completed_packets_event))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_cb
</UL>

<P><STRONG><a name="[3a]"></a>hci_number_of_completed_packets_event_cb</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, events_hci.o(i.hci_number_of_completed_packets_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[218]"></a>hci_number_of_completed_packets_event_copy</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, events.o(i.hci_number_of_completed_packets_event_copy))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_cb
</UL>

<P><STRONG><a name="[21a]"></a>hci_read_remote_version_information_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, events_hci.o(i.hci_read_remote_version_information_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_cb
</UL>

<P><STRONG><a name="[39]"></a>hci_read_remote_version_information_complete_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, events_hci.o(i.hci_read_remote_version_information_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[21b]"></a>hci_rx_acl_data_event</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, events_hci.o(i.hci_rx_acl_data_event))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event_cb
</UL>

<P><STRONG><a name="[4f]"></a>hci_rx_acl_data_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, events_hci.o(i.hci_rx_acl_data_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_int.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>main</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; System_Task_Init &rArr; printLog &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printLog
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Task_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[19a]"></a>printLog</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, log.o(i.printLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = printLog &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_receive_handle_task
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handle_task
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Task_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23f]"></a>pvPortMalloc</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[232]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[197]"></a>setInterruptPriority</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, system_bluenrg_lp.o(i.setInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[190]"></a>sma_CMAC_generate_tag</STRONG> (Thumb, 198 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_CMAC_generate_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sma_CMAC_generate_tag &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_generate_subkeys
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
</UL>

<P><STRONG><a name="[18f]"></a>smp_get_CSRK</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, smp_common.o(i.smp_get_CSRK))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
</UL>

<P><STRONG><a name="[b5]"></a>tsk_no_idle_check</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, stacklib_tasks.o(i.tsk_no_idle_check))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_bitmap_not_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_SleepCheck
</UL>

<P><STRONG><a name="[b2]"></a>tsk_notify_idx</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, stacklib_tasks.o(i.tsk_notify_idx))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_STACK_RadioHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_set_disconnect
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
</UL>

<P><STRONG><a name="[161]"></a>tsk_signal_resource_idx</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, stacklib_tasks.o(i.tsk_signal_resource_idx))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_resize
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_release
</UL>

<P><STRONG><a name="[21d]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[240]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tasks.o(i.vApplicationMallocFailedHook))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[24b]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tasks.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[254]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tasks.o(i.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[222]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[231]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[21f]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[21e]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[221]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[223]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[22b]"></a>vPortFree</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[22e]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, freertos_lp.o(i.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = vPortSuppressTicksAndSleep &rArr; HAL_PWR_MNGR_Request &rArr; PowerSave_Setup &rArr; MrBleBiasTrimConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StopTimer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StartTimerMs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_GetCurrentSysTime
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_DiffSysTimeMs
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[224]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[226]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[239]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[250]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks_1.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[23e]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks_1.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[248]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks_1.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[247]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks_1.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[19b]"></a>vTaskStartScheduler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tasks_1.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Task_Init
</UL>

<P><STRONG><a name="[246]"></a>vTaskStepTick</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks_1.o(i.vTaskStepTick))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[22d]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks_1.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[93]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, tasks_1.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_IRQHandler
</UL>

<P><STRONG><a name="[24a]"></a>xPortStartScheduler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1ea]"></a>xQueueGenericCreate</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handle_task
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[24d]"></a>xQueueGenericReset</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[24e]"></a>xQueueGenericSend</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[252]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1eb]"></a>xQueueReceive</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handle_task
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[251]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tasks_1.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[199]"></a>xTaskCreate</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, tasks_1.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Task_Init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[24f]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks_1.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[23a]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks_1.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[193]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks_1.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQHandler
</UL>

<P><STRONG><a name="[229]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks_1.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[23d]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasks_1.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[22f]"></a>xTaskResumeAll</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, tasks_1.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[249]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[237]"></a>xTimerGenericCommand</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[27]"></a>ble_evt_handle_task</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(i.ble_evt_handle_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ble_evt_handle_task &rArr; printLog &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.System_Task_Init)
</UL>
<P><STRONG><a name="[28]"></a>usart1_receive_handle_task</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.usart1_receive_handle_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = usart1_receive_handle_task &rArr; printLog &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.System_Task_Init)
</UL>
<P><STRONG><a name="[165]"></a>LL_RCC_SetRC64MPLLPrescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.LL_RCC_SetRC64MPLLPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MrBleBiasTrimConfig
</UL>

<P><STRONG><a name="[166]"></a>LL_RCC_SetRFClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.LL_RCC_SetRFClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioClockConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MrBleBiasTrimConfig
</UL>

<P><STRONG><a name="[191]"></a>SmpsTrimConfig</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, system_bluenrg_lp.o(i.SmpsTrimConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SmpsTrimConfig &rArr; SystemTimer_TimeoutConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutExpired
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[241]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_bluenrg_lp.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInterruptPriority
</UL>

<P><STRONG><a name="[12e]"></a>_check_radio_activity</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, rf_driver_hal_vtimer.o(i._check_radio_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioTimerValue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_WakeUpCallback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_SetRadioTimerValue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>

<P><STRONG><a name="[131]"></a>_start_timer</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rf_driver_hal_vtimer.o(i._start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _start_timer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_user_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StartTimerSysTime
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StartTimerMs
</UL>

<P><STRONG><a name="[12c]"></a>_update_user_timeout</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, rf_driver_hal_vtimer.o(i._update_user_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioHostWakeupTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_radio_activity
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StopTimer
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_RadioTimerIsr
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_timer
</UL>

<P><STRONG><a name="[12b]"></a>_virtualTimeBaseEnable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rf_driver_hal_vtimer.o(i._virtualTimeBaseEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StopTimer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StartTimerSysTime
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StartTimerMs
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_SetRadioTimerValue
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_PowerSaveLevelCheck
</UL>

<P><STRONG><a name="[1a6]"></a>calibration_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rf_driver_hal_vtimer.o(i.calibration_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = calibration_callback &rArr; TIMER_StartCalibration
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StartCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_virtualTimeBaseEnable
</UL>

<P><STRONG><a name="[174]"></a>LL_AHB_IsEnabledClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.LL_AHB_IsEnabledClock))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[175]"></a>LL_APB0_IsEnabledClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.LL_APB0_IsEnabledClock))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[176]"></a>LL_APB1_IsEnabledClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.LL_APB1_IsEnabledClock))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[178]"></a>LL_APB2_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rf_driver_hal_power_manager.o(i.LL_APB2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[177]"></a>LL_APB2_IsEnabledClock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.LL_APB2_IsEnabledClock))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[115]"></a>LL_PWR_ClearWakeupSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.LL_PWR_ClearWakeupSource))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
</UL>

<P><STRONG><a name="[116]"></a>LL_PWR_EnableWakeupSource</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.LL_PWR_EnableWakeupSource))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
</UL>

<P><STRONG><a name="[119]"></a>LL_PWR_GetWakeupSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.LL_PWR_GetWakeupSource))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[117]"></a>LL_PWR_SetWakeupIOPolarity</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.LL_PWR_SetWakeupIOPolarity))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
</UL>

<P><STRONG><a name="[17b]"></a>LL_RCC_DIRECT_HSE_Disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.LL_RCC_DIRECT_HSE_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[17f]"></a>LL_RCC_DIRECT_HSE_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rf_driver_hal_power_manager.o(i.LL_RCC_DIRECT_HSE_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_DIRECT_HSE_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[17a]"></a>LL_RCC_DIRECT_HSE_IsEnabled</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.LL_RCC_DIRECT_HSE_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[180]"></a>LL_RCC_RC64MPLL_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.LL_RCC_RC64MPLL_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[118]"></a>PowerSave_Setup</STRONG> (Thumb, 2056 bytes, Stack size 1000 bytes, rf_driver_hal_power_manager.o(i.PowerSave_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = PowerSave_Setup &rArr; MrBleBiasTrimConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_contextSave
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemDeepSleepCmd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_RC64MPLL_Disable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_DIRECT_HSE_IsEnabled
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_DIRECT_HSE_Enable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_DIRECT_HSE_Disable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_GetWakeupSource
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_IsEnabledClock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_EnableClock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_IsEnabledClock
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB0_IsEnabledClock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB_IsEnabledClock
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutExpired
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimer_TimeoutConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MrBleBiasTrimConfig
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
</UL>

<P><STRONG><a name="[179]"></a>SystemDeepSleepCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.SystemDeepSleepCmd))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSave_Setup
</UL>

<P><STRONG><a name="[11a]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
</UL>

<P><STRONG><a name="[11c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rf_driver_hal_power_manager.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_MNGR_Request
</UL>

<P><STRONG><a name="[1a1]"></a>_timer_start_calibration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_driver_ll_timer.o(i._timer_start_calibration))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_StartCalibration
</UL>

<P><STRONG><a name="[19d]"></a>get_system_time_and_machine</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rf_driver_ll_timer.o(i.get_system_time_and_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetRadioTimerValue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetPastSysTime
</UL>

<P><STRONG><a name="[110]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rf_driver_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[26]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf_driver_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rf_driver_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[11e]"></a>UART_EndRxTransfer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rf_driver_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>mul32</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, blue_unit_conversion.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_unit_conversion
</UL>

<P><STRONG><a name="[225]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[233]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[235]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[238]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[236]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[23b]"></a>prvSwitchTimerLists</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[2b]"></a>prvTimerTask</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvTimerTask &rArr; prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[21c]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tasks_1.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[220]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, tasks_1.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[22a]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks_1.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[22c]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tasks_1.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2a]"></a>prvIdleTask</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, tasks_1.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = prvIdleTask &rArr; vPortSuppressTicksAndSleep &rArr; HAL_PWR_MNGR_Request &rArr; PowerSave_Setup &rArr; MrBleBiasTrimConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks_1.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[230]"></a>prvInitialiseNewTask</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, tasks_1.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[253]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks_1.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[227]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[228]"></a>prvCopyDataToQueue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[234]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[23c]"></a>prvUnlockQueue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[29]"></a>prvTaskExitError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[a3]"></a>__NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_event.o(i.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ERROR_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>_DoInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[187]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[189]"></a>_WriteBlocking</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[188]"></a>_WriteNoCheck</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[18d]"></a>_PrintInt</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[18e]"></a>_PrintUnsigned</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[18c]"></a>_StoreChar</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[143]"></a>LL_channel_selection_algorithm_2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, ll_connect.o(i.LL_channel_selection_algorithm_2))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetChannelMap
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_pseudo_rand_num_gen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_modulo_37
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_check_unmapped_channel_in_ch_map
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
</UL>

<P><STRONG><a name="[148]"></a>LL_conn_check_unmapped_channel_in_ch_map</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_check_unmapped_channel_in_ch_map))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>

<P><STRONG><a name="[141]"></a>LL_conn_copy_tx_data_packet</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_copy_tx_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_conn_copy_tx_data_packet &rArr; Mem_Buff_block_copy &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_block_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[14a]"></a>LL_conn_get_ctrl_flds_isr_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_ctrl_flds_isr_p))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_enc_on
</UL>

<P><STRONG><a name="[14b]"></a>LL_conn_get_ctrl_pdu_ctrl_fld_p</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_get_ctrl_pdu_ctrl_fld_p))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_tx_acl_blocked
</UL>

<P><STRONG><a name="[146]"></a>LL_conn_modulo_37</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_modulo_37))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_slave_latency_cancelation
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>

<P><STRONG><a name="[13c]"></a>LL_conn_slave_latency_cancelation</STRONG> (Thumb, 240 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_slave_latency_cancelation))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmSetUnmappedChan
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetHopIncr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLECNTR_SmGetAccessAddr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_taskslot_length_anchor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_calculate_ww
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_modulo_37
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[139]"></a>LL_conn_time_t1_lessthan_t2</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_connect.o(i.LL_conn_time_t1_lessthan_t2))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[145]"></a>LL_pseudo_rand_num_gen</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, ll_connect.o(i.LL_pseudo_rand_num_gen))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_channel_selection_algorithm_2
</UL>

<P><STRONG><a name="[151]"></a>LL_cpe_get_ctrl_flds_common_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_cpe.o(i.LL_cpe_get_ctrl_flds_common_p))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_conn_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_cpe_get_tx_terminate_in_progress
</UL>

<P><STRONG><a name="[1bc]"></a>fifoBuf_getFreeHeader</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, events.o(i.fifoBuf_getFreeHeader))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>

<P><STRONG><a name="[f5]"></a>GAT_srv_attr_direct_value_write</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_attr_direct_value_write))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_extract_write_packet_data
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_attribute_modified_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
</UL>

<P><STRONG><a name="[fa]"></a>GAT_srv_check_sec_perm</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_check_sec_perm))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_link_status
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_encryption_key_size
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
</UL>

<P><STRONG><a name="[fe]"></a>GAT_srv_find_from_handle_p</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_find_from_handle_p))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
</UL>

<P><STRONG><a name="[102]"></a>GAT_srv_get_chr_decl_val</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_chr_decl_val))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_write_to_flat
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
</UL>

<P><STRONG><a name="[104]"></a>GAT_srv_get_chr_descr_val</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_chr_descr_val))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_fast_buffer_val
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
</UL>

<P><STRONG><a name="[103]"></a>GAT_srv_get_chr_val</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_chr_val))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_zip_val
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_fast_buffer_val
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
</UL>

<P><STRONG><a name="[107]"></a>GAT_srv_get_fast_buffer_val</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_fast_buffer_val))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_descr_val
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_val
</UL>

<P><STRONG><a name="[101]"></a>GAT_srv_get_incl_srv_val</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_incl_srv_val))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attribute_handle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
</UL>

<P><STRONG><a name="[f7]"></a>GAT_srv_get_zip_val</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_get_zip_val))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_cccd_val
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_chr_val
</UL>

<P><STRONG><a name="[f9]"></a>GAT_srv_set_cccd_val</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_set_cccd_val))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_index
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_zip_val
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
</UL>

<P><STRONG><a name="[f8]"></a>GAT_srv_set_zip_val</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, gat_srv.o(i.GAT_srv_set_zip_val))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_set_cccd_val
</UL>

<P><STRONG><a name="[f6]"></a>aci_gatt_srv_attribute_modified_event_push</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, gat_srv.o(i.aci_gatt_srv_attribute_modified_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_direct_value_write
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
</UL>

<P><STRONG><a name="[15c]"></a>LL_sched_calculate_priority</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_calculate_priority))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_return_token
</UL>

<P><STRONG><a name="[154]"></a>LL_sched_engine_manage_skip_cancel_slot</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_engine_manage_skip_cancel_slot))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_time_t1_ge_t2
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[152]"></a>LL_sched_get_cntxt_common_p</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_cntxt_common_p))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_next_taskslot
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_next_anchor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_current_taskslot_no
</UL>

<P><STRONG><a name="[153]"></a>LL_sched_get_cntxt_per_p</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_get_cntxt_per_p))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_set_taskslot_length_anchor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_per_state
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_done_cb
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_task
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_return_token
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine_manage_skip_cancel_slot
</UL>

<P><STRONG><a name="[155]"></a>LL_sched_return_token</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_return_token))
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_time_t1_lessthan_t2
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_get_cntxt_per_p
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_calculate_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_engine
</UL>

<P><STRONG><a name="[15b]"></a>LL_sched_time_t1_lessthan_t2</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, ll_scheduler.o(i.LL_sched_time_t1_lessthan_t2))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_sched_return_token
</UL>

<P><STRONG><a name="[16f]"></a>PM_Check_And_Set</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, pm.o(i.PM_Check_And_Set))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>

<P><STRONG><a name="[242]"></a>sma_generate_subkeys</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_generate_subkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sma_generate_subkeys &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_left_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
</UL>

<P><STRONG><a name="[243]"></a>sma_left_shift</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_left_shift))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_generate_subkeys
</UL>

<P><STRONG><a name="[244]"></a>tsk_bitmap_not_zero</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, stacklib_tasks.o(i.tsk_bitmap_not_zero))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_bitmap_not_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_no_idle_check
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_bitmap_not_zero
</UL>

<P><STRONG><a name="[1a2]"></a>Timer_StartFirstActive_sysT</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, stacklib_timers.o(i.Timer_StartFirstActive_sysT))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetCurrentSysTime
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StopTimer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StartTimerSysTime
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TryStartFirstActive
</UL>

<P><STRONG><a name="[ba]"></a>Timer_TryStartFirstActive</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, stacklib_timers.o(i.Timer_TryStartFirstActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_StopTimer
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartFirstActive_sysT
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_stop
</UL>

<P><STRONG><a name="[c9]"></a>GAT_att_db_find_attr_idx_from_handle</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_attr_idx_from_handle))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_with_handle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_with_conf_def
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
</UL>

<P><STRONG><a name="[c8]"></a>GAT_att_db_find_attr_idx_with_conf_def</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_attr_idx_with_conf_def))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_def
</UL>

<P><STRONG><a name="[ca]"></a>GAT_att_db_find_attr_idx_with_handle</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_find_attr_idx_with_handle))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_attr_idx_from_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
</UL>

<P><STRONG><a name="[cf]"></a>GAT_att_db_get_att_idx</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_get_att_idx))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_attribute
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
</UL>

<P><STRONG><a name="[ce]"></a>GAT_att_db_get_last_group_attribute</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, gat_att_db.o(i.GAT_att_db_get_last_group_attribute))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_att_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_last_group_handle
</UL>

<P><STRONG><a name="[d2]"></a>GAT_att_srv_alloc_resp_packt</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_alloc_resp_packt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_alloc_resp_packt &rArr; GAT_att_srv_get_exec_fn_id_by_op &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Host_Pckt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_exec_fn_id_by_op
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_get_conn_descr_p
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
</UL>

<P><STRONG><a name="[d5]"></a>GAT_att_srv_common_check</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_common_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_common_check &rArr; GAT_att_srv_get_exec_fn_id_by_op &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Host_Pckt
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_exec_fn_id_by_op
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
</UL>

<P><STRONG><a name="[82]"></a>GAT_att_srv_confirm_exc</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_confirm_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_confirm_exc &rArr; GAT_att_cmn_stop_timer &rArr; CST_stop &rArr; Timer_TryStartFirstActive &rArr; Timer_StartFirstActive_sysT &rArr; HAL_VTIMER_StartTimerSysTime &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>GAT_att_srv_exchange_mtu_exc</STRONG> (Thumb, 190 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_exchange_mtu_exc))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>GAT_att_srv_exec_wr_exc</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_exec_wr_exc))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>GAT_att_srv_find_by_type_val_exc</STRONG> (Thumb, 272 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_find_by_type_val_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_find_by_type_val_exc &rArr; PM_Pckt_Cmp &rArr; Mem_Buff_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>GAT_att_srv_find_info_exc</STRONG> (Thumb, 246 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_find_info_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_find_info_exc &rArr; GAT_srv_check_change_aware &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_get_next
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_from_handle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_type
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID_get_value_p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>GAT_att_srv_get_exec_fn_id_by_op</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_get_exec_fn_id_by_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_get_exec_fn_id_by_op &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_common_check
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_alloc_resp_packt
</UL>

<P><STRONG><a name="[d6]"></a>GAT_att_srv_get_handle_range</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_get_handle_range))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_common_check
</UL>

<P><STRONG><a name="[80]"></a>GAT_att_srv_prep_wr_exc</STRONG> (Thumb, 242 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_prep_wr_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_prep_wr_exc &rArr; GAT_att_srv_set_attr_value_check &rArr; GAT_srv_check_change_aware &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>GAT_att_srv_read_by_type_exc</STRONG> (Thumb, 474 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_read_by_type_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_read_by_type_exc &rArr; GAT_srv_is_supported_grouping_type &rArr; UUID_cmp_128bits &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_handle_range
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_is_supported_grouping_type
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_att_group_end_handle
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_type_attr_p
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>GAT_att_srv_read_exc</STRONG> (Thumb, 284 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_read_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_read_exc &rArr; GAT_srv_check_change_aware &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_handle_p
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>GAT_att_srv_read_multi_exc</STRONG> (Thumb, 340 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_read_multi_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_read_multi_exc &rArr; GAT_srv_check_change_aware &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_push
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_handle_p
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_get_attr_value
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>GAT_att_srv_run</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_run &rArr; GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tsk_notify_idx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACL_list_insert_tail
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_send_response
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_get_exec_fn_id_by_op
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_common_check
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_alloc_resp_packt
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
</UL>

<P><STRONG><a name="[ef]"></a>GAT_att_srv_send_response</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_send_response &rArr; GAT_att_cmn_send &rArr; L2C_send_frame &rArr; Acl_Transmit_Data &rArr; LL_Send_ACL_Data &rArr; LL_conn_slave_latency_cancelation &rArr; LL_sched_engine &rArr; HAL_VTIMER_SetRadioTimerValue &rArr; _virtualTimeBaseEnable &rArr; HAL_VTIMER_StopTimer &rArr; _update_user_timeout &rArr; _check_radio_activity &rArr; TIMER_SetRadioTimerValue &rArr; get_system_time_and_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_stop_timer
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_cmn_send
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_run
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
</UL>

<P><STRONG><a name="[e7]"></a>GAT_att_srv_set_attr_value_check</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_set_attr_value_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_set_attr_value_check &rArr; GAT_srv_check_change_aware &rArr; GAT_srv_find_by_type_attr_p &rArr; UUID_cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_find_by_handle_p
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_perms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_check_change_aware
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
</UL>

<P><STRONG><a name="[e0]"></a>GAT_att_srv_value_read</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_value_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_value_read &rArr; GAT_srv_attr_value_read &rArr; GAT_srv_get_attr_value &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_srv_read_event_push
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
</UL>

<P><STRONG><a name="[d7]"></a>GAT_att_srv_write_err_packet</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_write_err_packet))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_exc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_by_type_exc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_prep_wr_exc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_info_exc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_find_by_type_val_exc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_common_check
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_resp
</UL>

<P><STRONG><a name="[7f]"></a>GAT_att_srv_write_exc</STRONG> (Thumb, 230 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_att_srv_write_exc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = GAT_att_srv_write_exc &rArr; SMP_validate_signed_packet &rArr; sma_CMAC_generate_tag &rArr; hci_le_encrypt &rArr; BLEPLAT_aes128_encrypt &rArr; AESMGR_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_write_err_packet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_srv_attr_value_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gat_att_srv.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>GAT_srv_find_by_handle_p</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, gat_att_srv.o(i.GAT_srv_find_by_handle_p))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_db_find_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_set_attr_value_check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_exc
</UL>

<P><STRONG><a name="[d4]"></a>PM_Get_Host_Pckt</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gat_att_srv.o(i.PM_Get_Host_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_common_check
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_alloc_resp_packt
</UL>

<P><STRONG><a name="[ec]"></a>aci_gatt_srv_read_event_push</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, gat_att_srv.o(i.aci_gatt_srv_read_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_value_read
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_read_multi_exc
</UL>

<P><STRONG><a name="[db]"></a>aci_hal_fw_error_event_push</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gat_att_srv.o(i.aci_hal_fw_error_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAT_att_srv_exchange_mtu_exc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[9d]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
